{
  "resolvedId": "/Users/sebastianwessel/projekte/voyage/node_modules/@formkit/core/dist/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { token, cloneAny, empty, isObject, init, eq, clone, camel, extend as extend$1, undefine, has, kebab, dedupe, parseArgs, getAt, isQuotedString, rmEscapes, slugify, boolGetter } from '@formkit/utils';\n\n// packages/core/src/dispatcher.ts\nfunction createDispatcher() {\n  const middleware = [];\n  let currentIndex = 0;\n  const use2 = (dispatchable) => middleware.push(dispatchable);\n  const dispatch = (payload) => {\n    const current = middleware[currentIndex];\n    if (typeof current === \"function\") {\n      return current(payload, (explicitPayload) => {\n        currentIndex++;\n        return dispatch(explicitPayload);\n      });\n    }\n    currentIndex = 0;\n    return payload;\n  };\n  use2.dispatch = dispatch;\n  use2.unshift = (dispatchable) => middleware.unshift(dispatchable);\n  use2.remove = (dispatchable) => {\n    const index = middleware.indexOf(dispatchable);\n    if (index > -1)\n      middleware.splice(index, 1);\n  };\n  return use2;\n}\nfunction createEmitter() {\n  const listeners = /* @__PURE__ */ new Map();\n  const receipts2 = /* @__PURE__ */ new Map();\n  let buffer = void 0;\n  const emitter = (node, event) => {\n    if (buffer) {\n      buffer.set(event.name, [node, event]);\n      return;\n    }\n    if (listeners.has(event.name)) {\n      listeners.get(event.name).forEach((wrapper) => {\n        if (event.origin === node || wrapper.modifiers.includes(\"deep\")) {\n          wrapper.listener(event);\n        }\n      });\n    }\n    if (event.bubble) {\n      node.bubble(event);\n    }\n  };\n  emitter.flush = () => {\n    listeners.clear();\n    receipts2.clear();\n    buffer?.clear();\n  };\n  emitter.on = (eventName, listener, pos = \"push\") => {\n    const [event, ...modifiers] = eventName.split(\".\");\n    const receipt = listener.receipt || token();\n    const wrapper = {\n      modifiers,\n      event,\n      listener,\n      receipt\n    };\n    listeners.has(event) ? listeners.get(event)[pos](wrapper) : listeners.set(event, [wrapper]);\n    receipts2.has(receipt) ? receipts2.get(receipt)[pos](event) : receipts2.set(receipt, [event]);\n    return receipt;\n  };\n  emitter.off = (receipt) => {\n    if (receipts2.has(receipt)) {\n      receipts2.get(receipt)?.forEach((event) => {\n        const eventListeners = listeners.get(event);\n        if (Array.isArray(eventListeners)) {\n          listeners.set(\n            event,\n            eventListeners.filter((wrapper) => wrapper.receipt !== receipt)\n          );\n        }\n      });\n      receipts2.delete(receipt);\n    }\n  };\n  emitter.pause = (node) => {\n    if (!buffer)\n      buffer = /* @__PURE__ */ new Map();\n    if (node) {\n      node.walk((child) => child._e.pause());\n    }\n  };\n  emitter.play = (node) => {\n    if (!buffer)\n      return;\n    const events = buffer;\n    buffer = void 0;\n    events.forEach(([node2, event]) => emitter(node2, event));\n    if (node) {\n      node.walk((child) => child._e.play());\n    }\n  };\n  return emitter;\n}\nfunction emit(node, context, name, payload, bubble2 = true, meta) {\n  context._e(node, {\n    payload,\n    name,\n    bubble: bubble2,\n    origin: node,\n    meta\n  });\n  return node;\n}\nfunction bubble(node, _context, event) {\n  if (isNode(node.parent)) {\n    node.parent._e(node.parent, event);\n  }\n  return node;\n}\nfunction on(_node, context, name, listener, pos) {\n  return context._e.on(name, listener, pos);\n}\nfunction off(node, context, receipt) {\n  context._e.off(receipt);\n  return node;\n}\n\n// packages/core/src/errors.ts\nvar errorHandler = createDispatcher();\nerrorHandler((error2, next) => {\n  if (!error2.message)\n    error2.message = String(`E${error2.code}`);\n  return next(error2);\n});\nvar warningHandler = createDispatcher();\nwarningHandler((warning, next) => {\n  if (!warning.message)\n    warning.message = String(`W${warning.code}`);\n  const result = next(warning);\n  if (console && typeof console.warn === \"function\")\n    console.warn(result.message);\n  return result;\n});\nfunction warn(code, data = {}) {\n  warningHandler.dispatch({ code, data });\n}\nfunction error(code, data = {}) {\n  throw Error(errorHandler.dispatch({ code, data }).message);\n}\nfunction createMessage(conf, node) {\n  const m = {\n    blocking: false,\n    key: token(),\n    meta: {},\n    type: \"state\",\n    visible: true,\n    ...conf\n  };\n  if (node && m.value && m.meta.localize !== false) {\n    m.value = node.t(m);\n    m.meta.locale = node.config.locale;\n  }\n  return m;\n}\nvar storeTraps = {\n  apply: applyMessages,\n  set: setMessage,\n  remove: removeMessage,\n  filter: filterMessages,\n  reduce: reduceMessages,\n  release: releaseBuffer,\n  touch: touchMessages\n};\nfunction createStore(_buffer = false) {\n  const messages = {};\n  let node;\n  let buffer = _buffer;\n  let _b = [];\n  const _m = /* @__PURE__ */ new Map();\n  let _r = void 0;\n  const store = new Proxy(messages, {\n    get(...args) {\n      const [_target, property] = args;\n      if (property === \"buffer\")\n        return buffer;\n      if (property === \"_b\")\n        return _b;\n      if (property === \"_m\")\n        return _m;\n      if (property === \"_r\")\n        return _r;\n      if (has(storeTraps, property)) {\n        return storeTraps[property].bind(\n          null,\n          messages,\n          store,\n          node\n        );\n      }\n      return Reflect.get(...args);\n    },\n    set(_t, prop, value) {\n      if (prop === \"_n\") {\n        node = value;\n        if (_r === \"__n\")\n          releaseMissed(node, store);\n        return true;\n      } else if (prop === \"_b\") {\n        _b = value;\n        return true;\n      } else if (prop === \"buffer\") {\n        buffer = value;\n        return true;\n      } else if (prop === \"_r\") {\n        _r = value;\n        return true;\n      }\n      error(101, node);\n      return false;\n    }\n  });\n  return store;\n}\nfunction setMessage(messageStore, store, node, message) {\n  if (store.buffer) {\n    store._b.push([[message]]);\n    return store;\n  }\n  if (messageStore[message.key] !== message) {\n    if (typeof message.value === \"string\" && message.meta.localize !== false) {\n      const previous = message.value;\n      message.value = node.t(message);\n      if (message.value !== previous) {\n        message.meta.locale = node.props.locale;\n      }\n    }\n    const e = `message-${has(messageStore, message.key) ? \"updated\" : \"added\"}`;\n    messageStore[message.key] = Object.freeze(\n      node.hook.message.dispatch(message)\n    );\n    node.emit(e, message);\n  }\n  return store;\n}\nfunction touchMessages(messageStore, store) {\n  for (const key in messageStore) {\n    const message = { ...messageStore[key] };\n    store.set(message);\n  }\n}\nfunction removeMessage(messageStore, store, node, key) {\n  if (has(messageStore, key)) {\n    const message = messageStore[key];\n    delete messageStore[key];\n    node.emit(\"message-removed\", message);\n  }\n  if (store.buffer === true) {\n    store._b = store._b.filter((buffered) => {\n      buffered[0] = buffered[0].filter((m) => m.key !== key);\n      return buffered[1] || buffered[0].length;\n    });\n  }\n  return store;\n}\nfunction filterMessages(messageStore, store, node, callback, type) {\n  for (const key in messageStore) {\n    const message = messageStore[key];\n    if ((!type || message.type === type) && !callback(message)) {\n      removeMessage(messageStore, store, node, key);\n    }\n  }\n}\nfunction reduceMessages(messageStore, _store, _node, reducer, accumulator) {\n  for (const key in messageStore) {\n    const message = messageStore[key];\n    accumulator = reducer(accumulator, message);\n  }\n  return accumulator;\n}\nfunction applyMessages(_messageStore, store, node, messages, clear) {\n  if (Array.isArray(messages)) {\n    if (store.buffer) {\n      store._b.push([messages, clear]);\n      return;\n    }\n    const applied = new Set(\n      messages.map((message) => {\n        store.set(message);\n        return message.key;\n      })\n    );\n    if (typeof clear === \"string\") {\n      store.filter(\n        (message) => message.type !== clear || applied.has(message.key)\n      );\n    } else if (typeof clear === \"function\") {\n      store.filter((message) => !clear(message) || applied.has(message.key));\n    }\n  } else {\n    for (const address in messages) {\n      const child = node.at(address);\n      if (child) {\n        child.store.apply(messages[address], clear);\n      } else {\n        missed(node, store, address, messages[address], clear);\n      }\n    }\n  }\n}\nfunction createMessages(node, ...errors) {\n  const sourceKey = `${node.name}-set`;\n  const make = (error2) => createMessage({\n    key: slugify(error2),\n    type: \"error\",\n    value: error2,\n    meta: { source: sourceKey, autoClear: true }\n  });\n  return errors.filter((m) => !!m).map((errorSet) => {\n    if (typeof errorSet === \"string\")\n      errorSet = [errorSet];\n    if (Array.isArray(errorSet)) {\n      return errorSet.map((error2) => make(error2));\n    } else {\n      const errors2 = {};\n      for (const key in errorSet) {\n        if (Array.isArray(errorSet[key])) {\n          errors2[key] = errorSet[key].map(\n            (error2) => make(error2)\n          );\n        } else {\n          errors2[key] = [make(errorSet[key])];\n        }\n      }\n      return errors2;\n    }\n  });\n}\nfunction missed(node, store, address, messages, clear) {\n  const misses = store._m;\n  if (!misses.has(address))\n    misses.set(address, []);\n  if (!store._r)\n    store._r = releaseMissed(node, store);\n  misses.get(address)?.push([messages, clear]);\n}\nfunction releaseMissed(node, store) {\n  return node.on(\n    \"child.deep\",\n    ({ payload: child }) => {\n      store._m.forEach((misses, address) => {\n        if (node.at(address) === child) {\n          misses.forEach(([messages, clear]) => {\n            child.store.apply(messages, clear);\n          });\n          store._m.delete(address);\n        }\n      });\n      if (store._m.size === 0 && store._r) {\n        node.off(store._r);\n        store._r = void 0;\n      }\n    }\n  );\n}\nfunction releaseBuffer(_messageStore, store) {\n  store.buffer = false;\n  store._b.forEach(([messages, clear]) => store.apply(messages, clear));\n  store._b = [];\n}\nfunction createLedger() {\n  const ledger = {};\n  let n;\n  return {\n    count: (...args) => createCounter(n, ledger, ...args),\n    init(node) {\n      n = node;\n      node.on(\"message-added.deep\", add(ledger, 1));\n      node.on(\"message-removed.deep\", add(ledger, -1));\n    },\n    merge: (child) => merge(n, ledger, child),\n    settled(counterName) {\n      return has(ledger, counterName) ? ledger[counterName].promise : Promise.resolve();\n    },\n    unmerge: (child) => merge(n, ledger, child, true),\n    value(counterName) {\n      return has(ledger, counterName) ? ledger[counterName].count : 0;\n    }\n  };\n}\nfunction createCounter(node, ledger, counterName, condition, increment = 0) {\n  condition = parseCondition(condition || counterName);\n  if (!has(ledger, counterName)) {\n    const counter = {\n      condition,\n      count: 0,\n      name: counterName,\n      node,\n      promise: Promise.resolve(),\n      resolve: () => {\n      }\n      // eslint-disable-line @typescript-eslint/no-empty-function\n    };\n    ledger[counterName] = counter;\n    increment = node.store.reduce(\n      (sum, m) => sum + counter.condition(m) * 1,\n      increment\n    );\n    node.each((child) => {\n      child.ledger.count(counter.name, counter.condition);\n      increment += child.ledger.value(counter.name);\n    });\n  }\n  return count(ledger[counterName], increment).promise;\n}\nfunction parseCondition(condition) {\n  if (typeof condition === \"function\") {\n    return condition;\n  }\n  return (m) => m.type === condition;\n}\nfunction count(counter, increment) {\n  const initial = counter.count;\n  const post = counter.count + increment;\n  counter.count = post;\n  if (initial === 0 && post !== 0) {\n    counter.node.emit(`unsettled:${counter.name}`, counter.count, false);\n    counter.promise = new Promise((r) => counter.resolve = r);\n  } else if (initial !== 0 && post === 0) {\n    counter.node.emit(`settled:${counter.name}`, counter.count, false);\n    counter.resolve();\n  }\n  counter.node.emit(`count:${counter.name}`, counter.count, false);\n  return counter;\n}\nfunction add(ledger, delta) {\n  return (e) => {\n    for (const name in ledger) {\n      const counter = ledger[name];\n      if (counter.condition(e.payload)) {\n        count(counter, delta);\n      }\n    }\n  };\n}\nfunction merge(parent, ledger, child, remove = false) {\n  const originalParent = parent;\n  for (const key in ledger) {\n    const condition = ledger[key].condition;\n    if (!remove)\n      child.ledger.count(key, condition);\n    const increment = child.ledger.value(key) * (remove ? -1 : 1);\n    if (!parent)\n      continue;\n    do {\n      parent.ledger.count(key, condition, increment);\n      parent = parent.parent;\n    } while (parent);\n    parent = originalParent;\n  }\n}\n\n// packages/core/src/registry.ts\nvar registry = /* @__PURE__ */ new Map();\nvar reflected = /* @__PURE__ */ new Map();\nvar emit2 = createEmitter();\nvar receipts = [];\nfunction register(node) {\n  if (node.props.id) {\n    registry.set(node.props.id, node);\n    reflected.set(node, node.props.id);\n    emit2(node, {\n      payload: node,\n      name: node.props.id,\n      bubble: false,\n      origin: node\n    });\n  }\n}\nfunction deregister(node) {\n  if (reflected.has(node)) {\n    const id = reflected.get(node);\n    reflected.delete(node);\n    registry.delete(id);\n    emit2(node, {\n      payload: null,\n      name: id,\n      bubble: false,\n      origin: node\n    });\n  }\n}\nfunction getNode(id) {\n  return registry.get(id);\n}\nfunction resetRegistry() {\n  registry.forEach((node) => {\n    deregister(node);\n  });\n  receipts.forEach((receipt) => emit2.off(receipt));\n}\nfunction watchRegistry(id, callback) {\n  receipts.push(emit2.on(id, callback));\n}\n\n// packages/core/src/config.ts\nfunction configChange(node, prop, value) {\n  let usingFallback = true;\n  !(prop in node.config._t) ? node.emit(`config:${prop}`, value, false) : usingFallback = false;\n  if (!(prop in node.props)) {\n    node.emit(\"prop\", { prop, value });\n    node.emit(`prop:${prop}`, value);\n  }\n  return usingFallback;\n}\nfunction createConfig(options = {}) {\n  const nodes = /* @__PURE__ */ new Set();\n  const target = {\n    ...options,\n    ...{\n      _add: (node) => nodes.add(node),\n      _rm: (node) => nodes.delete(node)\n    }\n  };\n  const rootConfig = new Proxy(target, {\n    set(t, prop, value, r) {\n      if (typeof prop === \"string\") {\n        nodes.forEach((node) => configChange(node, prop, value));\n      }\n      return Reflect.set(t, prop, value, r);\n    }\n  });\n  return rootConfig;\n}\n\n// packages/core/src/submitForm.ts\nfunction submitForm(id, root) {\n  const formElement = (root || document).getElementById(id);\n  if (formElement instanceof HTMLFormElement) {\n    const event = new Event(\"submit\", { cancelable: true, bubbles: true });\n    formElement.dispatchEvent(event);\n    return;\n  }\n  warn(151, id);\n}\nfunction clearState(node) {\n  const clear = (n) => {\n    for (const key in n.store) {\n      const message = n.store[key];\n      if (message.type === \"error\" || message.type === \"ui\" && key === \"incomplete\") {\n        n.store.remove(key);\n      } else if (message.type === \"state\") {\n        n.store.set({ ...message, value: false });\n      }\n    }\n  };\n  clear(node);\n  node.walk(clear);\n}\nfunction reset(id, resetTo) {\n  const node = typeof id === \"string\" ? getNode(id) : id;\n  if (node) {\n    const initial = (n) => cloneAny(n.props.initial) || (n.type === \"group\" ? {} : n.type === \"list\" ? [] : void 0);\n    node._e.pause(node);\n    const resetValue2 = cloneAny(resetTo);\n    if (resetTo && !empty(resetTo)) {\n      node.props.initial = isObject(resetValue2) ? init(resetValue2) : resetValue2;\n      node.props._init = node.props.initial;\n    }\n    node.input(initial(node), false);\n    node.walk((child) => {\n      if (child.type === \"list\" && child.sync)\n        return;\n      child.input(initial(child), false);\n    });\n    node.input(\n      empty(resetValue2) && resetValue2 ? resetValue2 : initial(node),\n      false\n    );\n    const isDeepReset = node.type !== \"input\" && resetTo && !empty(resetTo) && isObject(resetTo);\n    if (isDeepReset) {\n      node.walk((child) => {\n        child.props.initial = isObject(child.value) ? init(child.value) : child.value;\n        child.props._init = child.props.initial;\n      });\n    }\n    node._e.play(node);\n    clearState(node);\n    node.emit(\"reset\", node);\n    return node;\n  }\n  warn(152, id);\n  return;\n}\n\n// packages/core/src/node.ts\nvar defaultConfig = {\n  delimiter: \".\",\n  delay: 0,\n  locale: \"en\",\n  rootClasses: (key) => ({ [`formkit-${kebab(key)}`]: true })\n};\nvar useIndex = Symbol(\"index\");\nvar valueRemoved = Symbol(\"removed\");\nvar valueMoved = Symbol(\"moved\");\nvar valueInserted = Symbol(\"inserted\");\nfunction isList(arg) {\n  return arg.type === \"list\" && Array.isArray(arg._value);\n}\nfunction isNode(node) {\n  return node && typeof node === \"object\" && node.__FKNode__ === true;\n}\nvar invalidSetter = (node, _context, property) => {\n  error(102, [node, property]);\n};\nvar traps = {\n  _c: trap(getContext, invalidSetter, false),\n  add: trap(addChild),\n  addProps: trap(addProps),\n  address: trap(getAddress, invalidSetter, false),\n  at: trap(getNode2),\n  bubble: trap(bubble),\n  clearErrors: trap(clearErrors),\n  calm: trap(calm),\n  config: trap(false),\n  define: trap(define),\n  disturb: trap(disturb),\n  destroy: trap(destroy),\n  extend: trap(extend),\n  hydrate: trap(hydrate),\n  index: trap(getIndex, setIndex, false),\n  input: trap(input),\n  each: trap(eachChild),\n  emit: trap(emit),\n  find: trap(find),\n  on: trap(on),\n  off: trap(off),\n  parent: trap(false, setParent),\n  plugins: trap(false),\n  remove: trap(removeChild),\n  root: trap(getRoot, invalidSetter, false),\n  reset: trap(resetValue),\n  resetConfig: trap(resetConfig),\n  setErrors: trap(setErrors),\n  submit: trap(submit),\n  t: trap(text),\n  use: trap(use),\n  name: trap(getName, false, false),\n  walk: trap(walkTree)\n};\nfunction createTraps() {\n  return new Map(Object.entries(traps));\n}\nfunction trap(getter, setter, curryGetter = true) {\n  return {\n    get: getter ? (node, context) => curryGetter ? (...args) => getter(node, context, ...args) : getter(node, context) : false,\n    set: setter !== void 0 ? setter : invalidSetter.bind(null)\n  };\n}\nfunction createHooks() {\n  const hooks = /* @__PURE__ */ new Map();\n  return new Proxy(hooks, {\n    get(_, property) {\n      if (!hooks.has(property)) {\n        hooks.set(property, createDispatcher());\n      }\n      return hooks.get(property);\n    }\n  });\n}\nvar nameCount = 0;\nvar idCount = 0;\nfunction resetCount() {\n  nameCount = 0;\n  idCount = 0;\n}\nfunction names(children) {\n  return children.reduce(\n    (named, child) => Object.assign(named, { [child.name]: child }),\n    {}\n  );\n}\nfunction createName(options) {\n  if (options.parent?.type === \"list\")\n    return useIndex;\n  return options.name || `${options.props?.type || \"input\"}_${++nameCount}`;\n}\nfunction createValue(options) {\n  if (options.type === \"group\") {\n    return init(\n      options.value && typeof options.value === \"object\" && !Array.isArray(options.value) ? options.value : {}\n    );\n  } else if (options.type === \"list\") {\n    return init(Array.isArray(options.value) ? options.value : []);\n  }\n  return options.value;\n}\nfunction input(node, context, value, async = true) {\n  context._value = validateInput(node, node.hook.input.dispatch(value));\n  node.emit(\"input\", context._value);\n  if (node.isCreated && node.type === \"input\" && eq(context._value, context.value)) {\n    node.emit(\"commitRaw\", context.value);\n    return context.settled;\n  }\n  if (context.isSettled)\n    node.disturb();\n  if (async) {\n    if (context._tmo)\n      clearTimeout(context._tmo);\n    context._tmo = setTimeout(\n      commit,\n      node.props.delay,\n      node,\n      context\n    );\n  } else {\n    commit(node, context);\n  }\n  return context.settled;\n}\nfunction validateInput(node, value) {\n  switch (node.type) {\n    case \"input\":\n      break;\n    case \"group\":\n      if (!value || typeof value !== \"object\")\n        error(107, [node, value]);\n      break;\n    case \"list\":\n      if (!Array.isArray(value))\n        error(108, [node, value]);\n      break;\n  }\n  return value;\n}\nfunction commit(node, context, calm2 = true, hydrate2 = true) {\n  context._value = context.value = node.hook.commit.dispatch(context._value);\n  if (node.type !== \"input\" && hydrate2)\n    node.hydrate();\n  node.emit(\"commitRaw\", context.value);\n  node.emit(\"commit\", context.value);\n  if (calm2)\n    node.calm();\n}\nfunction partial(context, { name, value, from }) {\n  if (Object.isFrozen(context._value))\n    return;\n  if (isList(context)) {\n    const insert = value === valueRemoved ? [] : value === valueMoved && typeof from === \"number\" ? context._value.splice(from, 1) : [value];\n    context._value.splice(\n      name,\n      value === valueMoved || from === valueInserted ? 0 : 1,\n      ...insert\n    );\n    return;\n  }\n  if (value !== valueRemoved) {\n    context._value[name] = value;\n  } else {\n    delete context._value[name];\n  }\n}\nfunction hydrate(node, context) {\n  const _value = context._value;\n  if (node.type === \"list\" && node.sync)\n    syncListNodes(node, context);\n  context.children.forEach((child) => {\n    if (typeof _value !== \"object\")\n      return;\n    if (child.name in _value) {\n      const childValue = child.type !== \"input\" || _value[child.name] && typeof _value[child.name] === \"object\" ? init(_value[child.name]) : _value[child.name];\n      if (!child.isSettled || !isObject(childValue) && eq(childValue, child._value))\n        return;\n      child.input(childValue, false);\n    } else {\n      if (node.type !== \"list\" || typeof child.name === \"number\") {\n        partial(context, { name: child.name, value: child.value });\n      }\n      if (!_value.__init) {\n        if (child.type === \"group\")\n          child.input({}, false);\n        else if (child.type === \"list\")\n          child.input([], false);\n        else\n          child.input(void 0, false);\n      }\n    }\n  });\n  return node;\n}\nfunction syncListNodes(node, context) {\n  const _value = node._value;\n  if (!Array.isArray(_value))\n    return;\n  const newChildren = [];\n  const unused = new Set(context.children);\n  const placeholderValues = /* @__PURE__ */ new Map();\n  _value.forEach((value, i) => {\n    if (context.children[i] && context.children[i]._value === value) {\n      newChildren.push(context.children[i]);\n      unused.delete(context.children[i]);\n    } else {\n      newChildren.push(null);\n      const indexes = placeholderValues.get(value) || [];\n      indexes.push(i);\n      placeholderValues.set(value, indexes);\n    }\n  });\n  if (unused.size && placeholderValues.size) {\n    unused.forEach((child) => {\n      if (placeholderValues.has(child._value)) {\n        const indexes = placeholderValues.get(child._value);\n        const index = indexes.shift();\n        newChildren[index] = child;\n        unused.delete(child);\n        if (!indexes.length)\n          placeholderValues.delete(child._value);\n      }\n    });\n  }\n  const emptyIndexes = [];\n  placeholderValues.forEach((indexes) => {\n    emptyIndexes.push(...indexes);\n  });\n  while (unused.size && emptyIndexes.length) {\n    const child = unused.values().next().value;\n    const index = emptyIndexes.shift();\n    if (index === void 0)\n      break;\n    newChildren[index] = child;\n    unused.delete(child);\n  }\n  emptyIndexes.forEach((index, value) => {\n    newChildren[index] = createPlaceholder({ value });\n  });\n  if (unused.size) {\n    unused.forEach((child) => {\n      if (!(\"__FKP\" in child)) {\n        const parent = child._c.parent;\n        if (!parent || isPlaceholder(parent))\n          return;\n        parent.ledger.unmerge(child);\n        child._c.parent = null;\n        child.destroy();\n      }\n    });\n  }\n  context.children = newChildren;\n}\nfunction disturb(node, context) {\n  if (context._d <= 0) {\n    context.isSettled = false;\n    node.emit(\"settled\", false, false);\n    context.settled = new Promise((resolve) => {\n      context._resolve = resolve;\n    });\n    if (node.parent)\n      node.parent?.disturb();\n  }\n  context._d++;\n  return node;\n}\nfunction calm(node, context, value) {\n  if (value !== void 0 && node.type !== \"input\") {\n    partial(context, value);\n    return commit(node, context, true, false);\n  }\n  if (context._d > 0)\n    context._d--;\n  if (context._d === 0) {\n    context.isSettled = true;\n    node.emit(\"settled\", true, false);\n    if (node.parent)\n      node.parent?.calm({ name: node.name, value: context.value });\n    if (context._resolve)\n      context._resolve(context.value);\n  }\n}\nfunction destroy(node, context) {\n  node.emit(\"destroying\", node);\n  node.store.filter(() => false);\n  if (node.parent) {\n    node.parent.remove(node);\n  }\n  deregister(node);\n  node.emit(\"destroyed\", node);\n  context._e.flush();\n  context._value = context.value = void 0;\n  for (const property in context.context) {\n    delete context.context[property];\n  }\n  context.plugins.clear();\n  context.context = null;\n}\nfunction define(node, context, definition) {\n  context.type = definition.type;\n  const clonedDef = clone(definition);\n  node.props.__propDefs = mergeProps(\n    node.props.__propDefs ?? [],\n    clonedDef?.props || []\n  );\n  clonedDef.props = node.props.__propDefs;\n  context.props.definition = clonedDef;\n  context.value = context._value = createValue({\n    type: node.type,\n    value: context.value\n  });\n  if (definition.forceTypeProp) {\n    if (node.props.type)\n      node.props.originalType = node.props.type;\n    context.props.type = definition.forceTypeProp;\n  }\n  if (definition.family) {\n    context.props.family = definition.family;\n  }\n  if (definition.features) {\n    definition.features.forEach((feature) => feature(node));\n  }\n  if (definition.props) {\n    node.addProps(definition.props);\n  }\n  node.emit(\"defined\", definition);\n}\nfunction addProps(node, context, props) {\n  const propNames = Array.isArray(props) ? props : Object.keys(props);\n  const defaults = !Array.isArray(props) ? propNames.reduce((defaults2, name) => {\n    if (\"default\" in props[name]) {\n      defaults2[name] = props[name].default;\n    }\n    return defaults2;\n  }, {}) : {};\n  if (node.props.attrs) {\n    const attrs = { ...node.props.attrs };\n    node.props._emit = false;\n    for (const attr in attrs) {\n      const camelName = camel(attr);\n      if (propNames.includes(camelName)) {\n        node.props[camelName] = attrs[attr];\n        delete attrs[attr];\n      }\n    }\n    if (!Array.isArray(props)) {\n      propNames.forEach((prop) => {\n        if (\"default\" in props[prop] && node.props[prop] === void 0) {\n          node.props[prop] = defaults[prop];\n        }\n      });\n    }\n    const initial = cloneAny(context._value);\n    node.props.initial = node.type !== \"input\" ? init(initial) : initial;\n    node.props._emit = true;\n    node.props.attrs = attrs;\n  }\n  const mergedProps = mergeProps(node.props.__propDefs ?? [], props);\n  if (node.props.definition) {\n    node.props.definition.props = mergedProps;\n  }\n  node.props.__propDefs = mergedProps;\n  node.emit(\"added-props\", props);\n  return node;\n}\nfunction toPropsObj(props) {\n  return !Array.isArray(props) ? props : props.reduce((props2, prop) => {\n    props2[prop] = {};\n    return props2;\n  }, {});\n}\nfunction mergeProps(props, newProps) {\n  if (Array.isArray(props) && Array.isArray(newProps))\n    return props.concat(newProps);\n  return extend$1(toPropsObj(props), toPropsObj(newProps));\n}\nfunction addChild(parent, parentContext, child, listIndex) {\n  if (parent.type === \"input\")\n    error(100, parent);\n  if (child.parent && child.parent !== parent) {\n    child.parent.remove(child);\n  }\n  if (!parentContext.children.includes(child)) {\n    if (listIndex !== void 0 && parent.type === \"list\") {\n      const existingNode = parentContext.children[listIndex];\n      if (existingNode && \"__FKP\" in existingNode) {\n        child._c.uid = existingNode.uid;\n        parentContext.children.splice(listIndex, 1, child);\n      } else {\n        parentContext.children.splice(listIndex, 0, child);\n      }\n      if (Array.isArray(parent.value) && parent.value.length < parentContext.children.length) {\n        parent.disturb().calm({\n          name: listIndex,\n          value: child.value,\n          from: valueInserted\n        });\n      }\n    } else {\n      parentContext.children.push(child);\n    }\n    if (!child.isSettled)\n      parent.disturb();\n  }\n  if (child.parent !== parent) {\n    child.parent = parent;\n    if (child.parent !== parent) {\n      parent.remove(child);\n      child.parent.add(child);\n      return parent;\n    }\n  } else {\n    child.use(parent.plugins);\n  }\n  commit(parent, parentContext, false);\n  parent.ledger.merge(child);\n  parent.emit(\"child\", child);\n  return parent;\n}\nfunction setParent(child, context, _property, parent) {\n  if (isNode(parent)) {\n    if (child.parent && child.parent !== parent) {\n      child.parent.remove(child);\n    }\n    context.parent = parent;\n    child.resetConfig();\n    !parent.children.includes(child) ? parent.add(child) : child.use(parent.plugins);\n    return true;\n  }\n  if (parent === null) {\n    context.parent = null;\n    return true;\n  }\n  return false;\n}\nfunction removeChild(node, context, child) {\n  const childIndex = context.children.indexOf(child);\n  if (childIndex !== -1) {\n    if (child.isSettled)\n      node.disturb();\n    context.children.splice(childIndex, 1);\n    let preserve = undefine(child.props.preserve);\n    let parent = child.parent;\n    while (preserve === void 0 && parent) {\n      preserve = undefine(parent.props.preserve);\n      parent = parent.parent;\n    }\n    if (!preserve) {\n      node.calm({\n        name: node.type === \"list\" ? childIndex : child.name,\n        value: valueRemoved\n      });\n    } else {\n      node.calm();\n    }\n    child.parent = null;\n    child.config._rmn = child;\n  }\n  node.ledger.unmerge(child);\n  node.emit(\"childRemoved\", child);\n  return node;\n}\nfunction eachChild(_node, context, callback) {\n  context.children.forEach((child) => !(\"__FKP\" in child) && callback(child));\n}\nfunction walkTree(_node, context, callback, stopIfFalse = false, skipSubtreeOnFalse = false) {\n  context.children.some((child) => {\n    if (\"__FKP\" in child)\n      return false;\n    const val = callback(child);\n    if (stopIfFalse && val === false)\n      return true;\n    if (skipSubtreeOnFalse && val === false)\n      return false;\n    return child.walk(callback, stopIfFalse, skipSubtreeOnFalse);\n  });\n}\nfunction resetConfig(node, context) {\n  const parent = node.parent || void 0;\n  context.config = createConfig2(node.config._t, parent);\n  node.walk((n) => n.resetConfig());\n}\nfunction use(node, context, plugin, run = true, library = true) {\n  if (Array.isArray(plugin) || plugin instanceof Set) {\n    plugin.forEach((p) => use(node, context, p));\n    return node;\n  }\n  if (!context.plugins.has(plugin)) {\n    if (library && typeof plugin.library === \"function\")\n      plugin.library(node);\n    if (run && plugin(node) !== false) {\n      context.plugins.add(plugin);\n      node.children.forEach((child) => child.use(plugin));\n    }\n  }\n  return node;\n}\nfunction setIndex(node, _context, _property, setIndex2) {\n  if (isNode(node.parent)) {\n    const children = node.parent.children;\n    const index = setIndex2 >= children.length ? children.length - 1 : setIndex2 < 0 ? 0 : setIndex2;\n    const oldIndex = children.indexOf(node);\n    if (oldIndex === -1)\n      return false;\n    children.splice(oldIndex, 1);\n    children.splice(index, 0, node);\n    node.parent.children = children;\n    if (node.parent.type === \"list\")\n      node.parent.disturb().calm({ name: index, value: valueMoved, from: oldIndex });\n    return true;\n  }\n  return false;\n}\nfunction getIndex(node) {\n  if (node.parent) {\n    const index = [...node.parent.children].indexOf(node);\n    return index === -1 ? node.parent.children.length : index;\n  }\n  return -1;\n}\nfunction getContext(_node, context) {\n  return context;\n}\nfunction getName(node, context) {\n  if (node.parent?.type === \"list\")\n    return node.index;\n  return context.name !== useIndex ? context.name : node.index;\n}\nfunction getAddress(node, context) {\n  return context.parent ? context.parent.address.concat([node.name]) : [node.name];\n}\nfunction getNode2(node, _context, locator) {\n  const address = typeof locator === \"string\" ? locator.split(node.config.delimiter) : locator;\n  if (!address.length)\n    return void 0;\n  const first = address[0];\n  let pointer = node.parent;\n  if (!pointer) {\n    if (String(address[0]) === String(node.name))\n      address.shift();\n    pointer = node;\n  }\n  if (first === \"$parent\")\n    address.shift();\n  while (pointer && address.length) {\n    const name = address.shift();\n    switch (name) {\n      case \"$root\":\n        pointer = node.root;\n        break;\n      case \"$parent\":\n        pointer = pointer.parent;\n        break;\n      case \"$self\":\n        pointer = node;\n        break;\n      default:\n        pointer = pointer.children.find(\n          (c) => !(\"__FKP\" in c) && String(c.name) === String(name)\n        ) || select(pointer, name);\n    }\n  }\n  return pointer || void 0;\n}\nfunction select(node, selector) {\n  const matches = String(selector).match(/^(find)\\((.*)\\)$/);\n  if (matches) {\n    const [, action, argStr] = matches;\n    const args = argStr.split(\",\").map((arg) => arg.trim());\n    switch (action) {\n      case \"find\":\n        return node.find(args[0], args[1]);\n      default:\n        return void 0;\n    }\n  }\n  return void 0;\n}\nfunction find(node, _context, searchTerm, searcher) {\n  return bfs(node, searchTerm, searcher);\n}\nfunction bfs(tree, searchValue, searchGoal = \"name\") {\n  const search = typeof searchGoal === \"string\" ? (n) => n[searchGoal] == searchValue : searchGoal;\n  const stack = [tree];\n  while (stack.length) {\n    const node = stack.shift();\n    if (\"__FKP\" in node)\n      continue;\n    if (search(node, searchValue))\n      return node;\n    stack.push(...node.children);\n  }\n  return void 0;\n}\nfunction getRoot(n) {\n  let node = n;\n  while (node.parent) {\n    node = node.parent;\n  }\n  return node;\n}\nfunction createConfig2(target = {}, parent) {\n  let node = void 0;\n  return new Proxy(target, {\n    get(...args) {\n      const prop = args[1];\n      if (prop === \"_t\")\n        return target;\n      const localValue = Reflect.get(...args);\n      if (localValue !== void 0)\n        return localValue;\n      if (parent) {\n        const parentVal = parent.config[prop];\n        if (parentVal !== void 0)\n          return parentVal;\n      }\n      if (target.rootConfig && typeof prop === \"string\") {\n        const rootValue = target.rootConfig[prop];\n        if (rootValue !== void 0)\n          return rootValue;\n      }\n      if (prop === \"delay\" && node?.type === \"input\")\n        return 20;\n      return defaultConfig[prop];\n    },\n    set(...args) {\n      const prop = args[1];\n      const value = args[2];\n      if (prop === \"_n\") {\n        node = value;\n        if (target.rootConfig)\n          target.rootConfig._add(node);\n        return true;\n      }\n      if (prop === \"_rmn\") {\n        if (target.rootConfig)\n          target.rootConfig._rm(node);\n        node = void 0;\n        return true;\n      }\n      if (!eq(target[prop], value, false)) {\n        const didSet = Reflect.set(...args);\n        if (node) {\n          node.emit(`config:${prop}`, value, false);\n          configChange(node, prop, value);\n          node.walk((n) => configChange(n, prop, value), false, true);\n        }\n        return didSet;\n      }\n      return true;\n    }\n  });\n}\nfunction text(node, _context, key, type = \"ui\") {\n  const fragment = typeof key === \"string\" ? { key, value: key, type } : key;\n  const value = node.hook.text.dispatch(fragment);\n  node.emit(\"text\", value, false);\n  return value.value;\n}\nfunction submit(node) {\n  const name = node.name;\n  do {\n    if (node.props.isForm === true)\n      break;\n    if (!node.parent)\n      error(106, name);\n    node = node.parent;\n  } while (node);\n  if (node.props.id) {\n    submitForm(node.props.id, node.props.__root);\n  }\n}\nfunction resetValue(node, _context, value) {\n  return reset(node, value);\n}\nfunction setErrors(node, _context, localErrors, childErrors) {\n  const sourceKey = `${node.name}-set`;\n  const errors = node.hook.setErrors.dispatch({ localErrors, childErrors });\n  createMessages(node, errors.localErrors, errors.childErrors).forEach(\n    (errors2) => {\n      node.store.apply(errors2, (message) => message.meta.source === sourceKey);\n    }\n  );\n  return node;\n}\nfunction clearErrors(node, _context, clearChildErrors = true, sourceKey) {\n  node.store.filter((m) => {\n    return !(sourceKey === void 0 || m.meta.source === sourceKey);\n  }, \"error\");\n  if (clearChildErrors) {\n    sourceKey = sourceKey || `${node.name}-set`;\n    node.walk((child) => {\n      child.store.filter((message) => {\n        return !(message.type === \"error\" && message.meta && message.meta.source === sourceKey);\n      });\n    });\n  }\n  return node;\n}\nfunction createProps(initial) {\n  const props = {\n    initial: typeof initial === \"object\" ? cloneAny(initial) : initial\n  };\n  let node;\n  let isEmitting = true;\n  let propDefs = {};\n  return new Proxy(props, {\n    get(...args) {\n      const [_t, prop] = args;\n      let val;\n      if (has(props, prop)) {\n        val = Reflect.get(...args);\n        if (propDefs[prop]?.boolean)\n          val = boolGetter(val);\n      } else if (node && typeof prop === \"string\" && node.config[prop] !== void 0) {\n        val = node.config[prop];\n      } else {\n        val = propDefs[prop]?.default;\n      }\n      const getter = propDefs[prop]?.getter;\n      if (propDefs[prop]?.boolean)\n        val = !!val;\n      return getter ? getter(val, node) : val;\n    },\n    set(target, property, originalValue, receiver) {\n      if (property === \"_n\") {\n        node = originalValue;\n        return true;\n      }\n      if (property === \"_emit\") {\n        isEmitting = originalValue;\n        return true;\n      }\n      let { prop, value } = node.hook.prop.dispatch({\n        prop: property,\n        value: originalValue\n      });\n      const setter = propDefs[prop]?.setter;\n      value = setter ? setter(value, node) : value;\n      if (!eq(props[prop], value, false) || typeof value === \"object\") {\n        const didSet = Reflect.set(target, prop, value, receiver);\n        if (prop === \"__propDefs\")\n          propDefs = toPropsObj(value);\n        if (isEmitting) {\n          node.emit(\"prop\", { prop, value });\n          if (typeof prop === \"string\")\n            node.emit(`prop:${prop}`, value);\n        }\n        return didSet;\n      }\n      return true;\n    }\n  });\n}\nfunction extend(node, context, property, trap2) {\n  context.traps.set(property, trap2);\n  return node;\n}\nfunction findDefinition(node, plugins) {\n  if (node.props.definition)\n    return node.define(node.props.definition);\n  for (const plugin of plugins) {\n    if (node.props.definition)\n      return;\n    if (typeof plugin.library === \"function\") {\n      plugin.library(node);\n    }\n  }\n}\nfunction createContext(options) {\n  const value = createValue(options);\n  const config = createConfig2(options.config || {}, options.parent);\n  return {\n    _d: 0,\n    _e: createEmitter(),\n    uid: Symbol(),\n    _resolve: false,\n    _tmo: false,\n    _value: value,\n    children: dedupe(options.children || []),\n    config,\n    hook: createHooks(),\n    isCreated: false,\n    isSettled: true,\n    ledger: createLedger(),\n    name: createName(options),\n    parent: options.parent || null,\n    plugins: /* @__PURE__ */ new Set(),\n    props: createProps(value),\n    settled: Promise.resolve(value),\n    store: createStore(true),\n    sync: options.sync || false,\n    traps: createTraps(),\n    type: options.type || \"input\",\n    value\n  };\n}\nfunction nodeInit(node, options) {\n  const hasInitialId = options.props?.id;\n  if (!hasInitialId)\n    delete options.props?.id;\n  node.ledger.init(node.store._n = node.props._n = node.config._n = node);\n  node.props._emit = false;\n  Object.assign(\n    node.props,\n    hasInitialId ? {} : { id: `input_${idCount++}` },\n    options.props ?? {}\n  );\n  node.props._emit = true;\n  findDefinition(\n    node,\n    /* @__PURE__ */ new Set([\n      ...options.plugins || [],\n      ...node.parent ? node.parent.plugins : []\n    ])\n  );\n  if (options.plugins) {\n    for (const plugin of options.plugins) {\n      use(node, node._c, plugin, true, false);\n    }\n  }\n  node.each((child) => node.add(child));\n  if (node.parent)\n    node.parent.add(node, options.index);\n  if (node.type === \"input\" && node.children.length)\n    error(100, node);\n  input(node, node._c, node._value, false);\n  node.store.release();\n  if (hasInitialId)\n    register(node);\n  node.emit(\"created\", node);\n  node.isCreated = true;\n  return node;\n}\nfunction createPlaceholder(options) {\n  return {\n    __FKP: true,\n    uid: Symbol(),\n    name: options?.name ?? `p_${nameCount++}`,\n    value: options?.value ?? null,\n    _value: options?.value ?? null,\n    type: options?.type ?? \"input\",\n    use: () => {\n    },\n    input(value) {\n      this._value = value;\n      this.value = value;\n      return Promise.resolve();\n    },\n    isSettled: true\n  };\n}\nfunction isPlaceholder(node) {\n  return \"__FKP\" in node;\n}\nfunction createNode(options) {\n  const ops = options || {};\n  const context = createContext(ops);\n  const node = new Proxy(context, {\n    get(...args) {\n      const [, property] = args;\n      if (property === \"__FKNode__\")\n        return true;\n      const trap2 = context.traps.get(property);\n      if (trap2 && trap2.get)\n        return trap2.get(node, context);\n      return Reflect.get(...args);\n    },\n    set(...args) {\n      const [, property, value] = args;\n      const trap2 = context.traps.get(property);\n      if (trap2 && trap2.set)\n        return trap2.set(node, context, property, value);\n      return Reflect.set(...args);\n    }\n  });\n  return nodeInit(node, ops);\n}\nfunction isDOM(node) {\n  return typeof node !== \"string\" && has(node, \"$el\");\n}\nfunction isComponent(node) {\n  return typeof node !== \"string\" && has(node, \"$cmp\");\n}\nfunction isConditional(node) {\n  if (!node || typeof node === \"string\")\n    return false;\n  return has(node, \"if\") && has(node, \"then\");\n}\nfunction isSugar(node) {\n  return typeof node !== \"string\" && \"$formkit\" in node;\n}\nfunction sugar(node) {\n  if (typeof node === \"string\") {\n    return {\n      $el: \"text\",\n      children: node\n    };\n  }\n  if (isSugar(node)) {\n    const {\n      $formkit: type,\n      for: iterator,\n      if: condition,\n      children,\n      bind,\n      ...props\n    } = node;\n    return Object.assign(\n      {\n        $cmp: \"FormKit\",\n        props: { ...props, type }\n      },\n      condition ? { if: condition } : {},\n      iterator ? { for: iterator } : {},\n      children ? { children } : {},\n      bind ? { bind } : {}\n    );\n  }\n  return node;\n}\nfunction compile(expr) {\n  let provideTokens;\n  const requirements = /* @__PURE__ */ new Set();\n  const x = function expand(operand, tokens) {\n    return typeof operand === \"function\" ? operand(tokens) : operand;\n  };\n  const operatorRegistry = [\n    {\n      \"&&\": (l, r, t) => x(l, t) && x(r, t),\n      \"||\": (l, r, t) => x(l, t) || x(r, t)\n    },\n    {\n      \"===\": (l, r, t) => !!(x(l, t) === x(r, t)),\n      \"!==\": (l, r, t) => !!(x(l, t) !== x(r, t)),\n      \"==\": (l, r, t) => !!(x(l, t) == x(r, t)),\n      \"!=\": (l, r, t) => !!(x(l, t) != x(r, t)),\n      \">=\": (l, r, t) => !!(x(l, t) >= x(r, t)),\n      \"<=\": (l, r, t) => !!(x(l, t) <= x(r, t)),\n      \">\": (l, r, t) => !!(x(l, t) > x(r, t)),\n      \"<\": (l, r, t) => !!(x(l, t) < x(r, t))\n    },\n    {\n      \"+\": (l, r, t) => x(l, t) + x(r, t),\n      \"-\": (l, r, t) => x(l, t) - x(r, t)\n    },\n    {\n      \"*\": (l, r, t) => x(l, t) * x(r, t),\n      \"/\": (l, r, t) => x(l, t) / x(r, t),\n      \"%\": (l, r, t) => x(l, t) % x(r, t)\n    }\n  ];\n  const operatorSymbols = operatorRegistry.reduce((s, g) => {\n    return s.concat(Object.keys(g));\n  }, []);\n  const operatorChars = new Set(operatorSymbols.map((key) => key.charAt(0)));\n  function getOp(symbols, char, p, expression) {\n    const candidates = symbols.filter((s) => s.startsWith(char));\n    if (!candidates.length)\n      return false;\n    return candidates.find((symbol) => {\n      if (expression.length >= p + symbol.length) {\n        const nextChars = expression.substring(p, p + symbol.length);\n        if (nextChars === symbol)\n          return symbol;\n      }\n      return false;\n    });\n  }\n  function getStep(p, expression, direction = 1) {\n    let next = direction ? expression.substring(p + 1).trim() : expression.substring(0, p).trim();\n    if (!next.length)\n      return -1;\n    if (!direction) {\n      const reversed = next.split(\"\").reverse();\n      const start = reversed.findIndex((char2) => operatorChars.has(char2));\n      next = reversed.slice(start).join(\"\");\n    }\n    const char = next[0];\n    return operatorRegistry.findIndex((operators) => {\n      const symbols = Object.keys(operators);\n      return !!getOp(symbols, char, 0, next);\n    });\n  }\n  function getTail(pos, expression) {\n    let tail = \"\";\n    const length = expression.length;\n    let depth = 0;\n    for (let p = pos; p < length; p++) {\n      const char = expression.charAt(p);\n      if (char === \"(\") {\n        depth++;\n      } else if (char === \")\") {\n        depth--;\n      } else if (depth === 0 && char === \" \") {\n        continue;\n      }\n      if (depth === 0 && getOp(operatorSymbols, char, p, expression)) {\n        return [tail, p - 1];\n      } else {\n        tail += char;\n      }\n    }\n    return [tail, expression.length - 1];\n  }\n  function parseLogicals(expression, step = 0) {\n    const operators = operatorRegistry[step];\n    const length = expression.length;\n    const symbols = Object.keys(operators);\n    let depth = 0;\n    let quote = false;\n    let op = null;\n    let operand = \"\";\n    let left = null;\n    let operation;\n    let lastChar = \"\";\n    let char = \"\";\n    let parenthetical = \"\";\n    let parenQuote = \"\";\n    let startP = 0;\n    const addTo = (depth2, char2) => {\n      depth2 ? parenthetical += char2 : operand += char2;\n    };\n    for (let p = 0; p < length; p++) {\n      lastChar = char;\n      char = expression.charAt(p);\n      if ((char === \"'\" || char === '\"') && lastChar !== \"\\\\\" && (depth === 0 && !quote || depth && !parenQuote)) {\n        if (depth) {\n          parenQuote = char;\n        } else {\n          quote = char;\n        }\n        addTo(depth, char);\n        continue;\n      } else if (quote && (char !== quote || lastChar === \"\\\\\") || parenQuote && (char !== parenQuote || lastChar === \"\\\\\")) {\n        addTo(depth, char);\n        continue;\n      } else if (quote === char) {\n        quote = false;\n        addTo(depth, char);\n        continue;\n      } else if (parenQuote === char) {\n        parenQuote = false;\n        addTo(depth, char);\n        continue;\n      } else if (char === \" \") {\n        continue;\n      } else if (char === \"(\") {\n        if (depth === 0) {\n          startP = p;\n        } else {\n          parenthetical += char;\n        }\n        depth++;\n      } else if (char === \")\") {\n        depth--;\n        if (depth === 0) {\n          const fn = typeof operand === \"string\" && operand.startsWith(\"$\") ? operand : void 0;\n          const hasTail = fn && expression.charAt(p + 1) === \".\";\n          let tail = \"\";\n          if (hasTail) {\n            [tail, p] = getTail(p + 2, expression);\n          }\n          const lStep = op ? step : getStep(startP, expression, 0);\n          const rStep = getStep(p, expression);\n          if (lStep === -1 && rStep === -1) {\n            operand = evaluate(parenthetical, -1, fn, tail);\n            if (typeof operand === \"string\")\n              operand = parenthetical;\n          } else if (op && (lStep >= rStep || rStep === -1) && step === lStep) {\n            left = op.bind(null, evaluate(parenthetical, -1, fn, tail));\n            op = null;\n            operand = \"\";\n          } else if (rStep > lStep && step === rStep) {\n            operand = evaluate(parenthetical, -1, fn, tail);\n          } else {\n            operand += `(${parenthetical})${hasTail ? `.${tail}` : \"\"}`;\n          }\n          parenthetical = \"\";\n        } else {\n          parenthetical += char;\n        }\n      } else if (depth === 0 && (operation = getOp(symbols, char, p, expression))) {\n        if (p === 0) {\n          error(103, [operation, expression]);\n        }\n        p += operation.length - 1;\n        if (p === expression.length - 1) {\n          error(104, [operation, expression]);\n        }\n        if (!op) {\n          if (left) {\n            op = operators[operation].bind(null, evaluate(left, step));\n            left = null;\n          } else {\n            op = operators[operation].bind(null, evaluate(operand, step));\n            operand = \"\";\n          }\n        } else if (operand) {\n          left = op.bind(null, evaluate(operand, step));\n          op = operators[operation].bind(null, left);\n          operand = \"\";\n        }\n        continue;\n      } else {\n        addTo(depth, char);\n      }\n    }\n    if (operand && op) {\n      op = op.bind(null, evaluate(operand, step));\n    }\n    op = !op && left ? left : op;\n    if (!op && operand) {\n      op = (v, t) => {\n        return typeof v === \"function\" ? v(t) : v;\n      };\n      op = op.bind(null, evaluate(operand, step));\n    }\n    if (!op && !operand) {\n      error(105, expression);\n    }\n    return op;\n  }\n  function evaluate(operand, step, fnToken, tail) {\n    if (fnToken) {\n      const fn = evaluate(fnToken, operatorRegistry.length);\n      let userFuncReturn;\n      let tailCall = tail ? compile(`$${tail}`) : false;\n      if (typeof fn === \"function\") {\n        const args = parseArgs(String(operand)).map(\n          (arg) => evaluate(arg, -1)\n        );\n        return (tokens) => {\n          const userFunc = fn(tokens);\n          if (typeof userFunc !== \"function\") {\n            warn(150, fnToken);\n            return userFunc;\n          }\n          userFuncReturn = userFunc(\n            ...args.map(\n              (arg) => typeof arg === \"function\" ? arg(tokens) : arg\n            )\n          );\n          if (tailCall) {\n            tailCall = tailCall.provide((subTokens) => {\n              const rootTokens = provideTokens(subTokens);\n              const t = subTokens.reduce(\n                (tokenSet, token3) => {\n                  const isTail = token3 === tail || tail?.startsWith(`${token3}(`);\n                  if (isTail) {\n                    const value = getAt(userFuncReturn, token3);\n                    tokenSet[token3] = () => value;\n                  } else {\n                    tokenSet[token3] = rootTokens[token3];\n                  }\n                  return tokenSet;\n                },\n                {}\n              );\n              return t;\n            });\n          }\n          return tailCall ? tailCall() : userFuncReturn;\n        };\n      }\n    } else if (typeof operand === \"string\") {\n      if (operand === \"true\")\n        return true;\n      if (operand === \"false\")\n        return false;\n      if (operand === \"undefined\")\n        return void 0;\n      if (isQuotedString(operand))\n        return rmEscapes(operand.substring(1, operand.length - 1));\n      if (!isNaN(+operand))\n        return Number(operand);\n      if (step < operatorRegistry.length - 1) {\n        return parseLogicals(operand, step + 1);\n      } else {\n        if (operand.startsWith(\"$\")) {\n          const cleaned = operand.substring(1);\n          requirements.add(cleaned);\n          return function getToken(tokens) {\n            return cleaned in tokens ? tokens[cleaned]() : void 0;\n          };\n        }\n        return operand;\n      }\n    }\n    return operand;\n  }\n  const compiled = parseLogicals(\n    expr.startsWith(\"$:\") ? expr.substring(2) : expr\n  );\n  const reqs = Array.from(requirements);\n  function provide(callback) {\n    provideTokens = callback;\n    return Object.assign(\n      // @ts-ignore - @rollup/plugin-typescript doesn't like this\n      compiled.bind(null, callback(reqs)),\n      { provide }\n    );\n  }\n  return Object.assign(compiled, {\n    provide\n  });\n}\n\n// packages/core/src/classes.ts\nfunction createClasses(propertyKey, node, sectionClassList) {\n  if (!sectionClassList)\n    return {};\n  if (typeof sectionClassList === \"string\") {\n    const classKeys = sectionClassList.split(\" \");\n    return classKeys.reduce(\n      (obj, key) => Object.assign(obj, { [key]: true }),\n      {}\n    );\n  } else if (typeof sectionClassList === \"function\") {\n    return createClasses(\n      propertyKey,\n      node,\n      sectionClassList(node, propertyKey)\n    );\n  }\n  return sectionClassList;\n}\nfunction generateClassList(node, property, ...args) {\n  const combinedClassList = args.reduce((finalClassList, currentClassList) => {\n    if (!currentClassList)\n      return handleNegativeClasses(finalClassList);\n    const { $reset, ...classList } = currentClassList;\n    if ($reset) {\n      return handleNegativeClasses(classList);\n    }\n    return handleNegativeClasses(Object.assign(finalClassList, classList));\n  }, {});\n  return Object.keys(\n    node.hook.classes.dispatch({ property, classes: combinedClassList }).classes\n  ).filter((key) => combinedClassList[key]).join(\" \") || null;\n}\nfunction handleNegativeClasses(classList) {\n  const removalToken = \"$remove:\";\n  let hasNegativeClassValue = false;\n  const applicableClasses = Object.keys(classList).filter((className) => {\n    if (classList[className] && className.startsWith(removalToken)) {\n      hasNegativeClassValue = true;\n    }\n    return classList[className];\n  });\n  if (applicableClasses.length > 1 && hasNegativeClassValue) {\n    const negativeClasses = applicableClasses.filter((className) => className.startsWith(removalToken));\n    negativeClasses.map((negativeClass) => {\n      const targetClass = negativeClass.substring(removalToken.length);\n      classList[targetClass] = false;\n      classList[negativeClass] = false;\n    });\n  }\n  return classList;\n}\n\n// packages/core/src/setErrors.ts\nfunction setErrors2(id, localErrors, childErrors) {\n  const node = getNode(id);\n  if (node) {\n    node.setErrors(localErrors, childErrors);\n  } else {\n    warn(651, id);\n  }\n}\nfunction clearErrors2(id, clearChildren = true) {\n  const node = getNode(id);\n  if (node) {\n    node.clearErrors(clearChildren);\n  } else {\n    warn(652, id);\n  }\n}\n\n// packages/core/src/index.ts\nvar FORMKIT_VERSION = \"1.5.9\";\n\nexport { FORMKIT_VERSION, bfs, clearErrors2 as clearErrors, compile, createClasses, createConfig, createMessage, createNode, createPlaceholder, createValue, deregister, error, errorHandler, generateClassList, getNode, isComponent, isConditional, isDOM, isList, isNode, isPlaceholder, isSugar, names, register, reset, resetCount, resetRegistry, setErrors2 as setErrors, submitForm, sugar, use, useIndex, valueInserted, valueMoved, valueRemoved, warn, warningHandler, watchRegistry };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.mjs.map",
      "start": 1709718916273,
      "end": 1709718916349,
      "sourcemaps": null
    },
    {
      "name": "unplugin-formkit",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709718916349,
      "end": 1709718916349,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709718916350,
      "end": 1709718916350,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709718916350,
      "end": 1709718916350,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709718916350,
      "end": 1709718916350,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709718916350,
      "end": 1709718916350,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1709718916350,
      "end": 1709718916350,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709718916350,
      "end": 1709718916350,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709718916350,
      "end": 1709718916350,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709718916350,
      "end": 1709718916350,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709718916350,
      "end": 1709718916350,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709718916350,
      "end": 1709718916350,
      "order": "normal"
    }
  ]
}
