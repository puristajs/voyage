{
  "resolvedId": "/Users/sebastianwessel/projekte/voyage/node_modules/@formkit/themes/dist/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { FORMKIT_VERSION } from '@formkit/core';\n\n// packages/themes/src/index.ts\nfunction generateClasses(classes) {\n  const classesBySectionKey = {};\n  Object.keys(classes).forEach((type) => {\n    Object.keys(classes[type]).forEach((sectionKey) => {\n      if (!classesBySectionKey[sectionKey]) {\n        classesBySectionKey[sectionKey] = {\n          [type]: classes[type][sectionKey]\n        };\n      } else {\n        classesBySectionKey[sectionKey][type] = classes[type][sectionKey];\n      }\n    });\n  });\n  Object.keys(classesBySectionKey).forEach((sectionKey) => {\n    const classesObject = classesBySectionKey[sectionKey];\n    classesBySectionKey[sectionKey] = function(node, sectionKey2) {\n      return addClassesBySection(node, sectionKey2, classesObject);\n    };\n  });\n  return classesBySectionKey;\n}\nfunction addClassesBySection(node, _sectionKey, classesByType) {\n  const type = node.props.type;\n  const family = node.props.family;\n  let classList = \"\";\n  if (classesByType.global) {\n    classList += classesByType.global + \" \";\n  }\n  if (classesByType[`family:${family}`]) {\n    classList += classesByType[`family:${family}`] + \" \";\n  }\n  if (classesByType[type]) {\n    classList += classesByType[type];\n  }\n  const listParts = classList.split(\"$reset\");\n  if (listParts.length > 1) {\n    return `$reset ${listParts[listParts.length - 1].trim()}`;\n  }\n  return listParts[0].trim();\n}\nvar documentStyles = void 0;\nvar documentThemeLinkTag = null;\nvar themeDidLoad;\nvar themeHasLoaded = false;\nvar themeWasRequested = false;\nvar themeLoaded = /* @__PURE__ */ new Promise((res) => {\n  themeDidLoad = () => {\n    themeHasLoaded = true;\n    res();\n  };\n});\nvar isClient = typeof window !== \"undefined\" && typeof fetch !== \"undefined\";\ndocumentStyles = isClient ? /* @__PURE__ */ getComputedStyle(document.documentElement) : void 0;\nvar iconRegistry = {};\nvar iconRequests = {};\nfunction createThemePlugin(theme, icons, iconLoaderUrl, iconLoader) {\n  if (icons) {\n    Object.assign(iconRegistry, icons);\n  }\n  if (isClient && !themeWasRequested && documentStyles?.getPropertyValue(\"--formkit-theme\")) {\n    themeDidLoad();\n    themeWasRequested = true;\n  } else if (theme && !themeWasRequested && isClient) {\n    loadTheme(theme);\n  } else if (!themeWasRequested && isClient) {\n    themeDidLoad();\n  }\n  const themePlugin = function themePlugin2(node) {\n    node.addProps([\"iconLoader\", \"iconLoaderUrl\"]);\n    node.props.iconHandler = createIconHandler(\n      node.props?.iconLoader ? node.props.iconLoader : iconLoader,\n      node.props?.iconLoaderUrl ? node.props.iconLoaderUrl : iconLoaderUrl\n    );\n    loadIconPropIcons(node, node.props.iconHandler);\n    node.on(\"created\", () => {\n      if (node?.context?.handlers) {\n        node.context.handlers.iconClick = (sectionKey) => {\n          const clickHandlerProp = `on${sectionKey.charAt(0).toUpperCase()}${sectionKey.slice(1)}IconClick`;\n          const handlerFunction = node.props[clickHandlerProp];\n          if (handlerFunction && typeof handlerFunction === \"function\") {\n            return (e) => {\n              return handlerFunction(node, e);\n            };\n          }\n          return void 0;\n        };\n      }\n    });\n  };\n  themePlugin.iconHandler = createIconHandler(iconLoader, iconLoaderUrl);\n  return themePlugin;\n}\nfunction loadTheme(theme) {\n  if (!theme || !isClient || typeof getComputedStyle !== \"function\") {\n    return;\n  }\n  themeWasRequested = true;\n  documentThemeLinkTag = document.getElementById(\"formkit-theme\");\n  if (theme && // if we have a window object\n  isClient && // we don't have an existing theme OR the theme being set up is different\n  (!documentStyles?.getPropertyValue(\"--formkit-theme\") && !documentThemeLinkTag || documentThemeLinkTag?.getAttribute(\"data-theme\") && documentThemeLinkTag?.getAttribute(\"data-theme\") !== theme)) {\n    const formkitVersion = FORMKIT_VERSION.startsWith(\"__\") ? \"latest\" : FORMKIT_VERSION;\n    const themeUrl = `https://cdn.jsdelivr.net/npm/@formkit/themes@${formkitVersion}/dist/${theme}/theme.css`;\n    const link = document.createElement(\"link\");\n    link.type = \"text/css\";\n    link.rel = \"stylesheet\";\n    link.id = \"formkit-theme\";\n    link.setAttribute(\"data-theme\", theme);\n    link.onload = () => {\n      documentStyles = getComputedStyle(document.documentElement);\n      themeDidLoad();\n    };\n    document.head.appendChild(link);\n    link.href = themeUrl;\n    if (documentThemeLinkTag) {\n      documentThemeLinkTag.remove();\n    }\n  }\n}\nfunction createIconHandler(iconLoader, iconLoaderUrl) {\n  return (iconName) => {\n    if (typeof iconName !== \"string\")\n      return;\n    if (iconName.startsWith(\"<svg\")) {\n      return iconName;\n    }\n    const isDefault = iconName.startsWith(\"default:\");\n    iconName = isDefault ? iconName.split(\":\")[1] : iconName;\n    const iconWasAlreadyLoaded = iconName in iconRegistry;\n    let loadedIcon = void 0;\n    if (iconWasAlreadyLoaded) {\n      return iconRegistry[iconName];\n    } else if (!iconRequests[iconName]) {\n      loadedIcon = getIconFromStylesheet(iconName);\n      loadedIcon = isClient && typeof loadedIcon === \"undefined\" ? Promise.resolve(loadedIcon) : loadedIcon;\n      if (loadedIcon instanceof Promise) {\n        iconRequests[iconName] = loadedIcon.then((iconValue) => {\n          if (!iconValue && typeof iconName === \"string\" && !isDefault) {\n            return loadedIcon = typeof iconLoader === \"function\" ? iconLoader(iconName) : getRemoteIcon(iconName, iconLoaderUrl);\n          }\n          return iconValue;\n        }).then((finalIcon) => {\n          if (typeof iconName === \"string\") {\n            iconRegistry[isDefault ? `default:${iconName}` : iconName] = finalIcon;\n          }\n          return finalIcon;\n        });\n      } else if (typeof loadedIcon === \"string\") {\n        iconRegistry[isDefault ? `default:${iconName}` : iconName] = loadedIcon;\n        return loadedIcon;\n      }\n    }\n    return iconRequests[iconName];\n  };\n}\nfunction getIconFromStylesheet(iconName) {\n  if (!isClient)\n    return;\n  if (themeHasLoaded) {\n    return loadStylesheetIcon(iconName);\n  } else {\n    return themeLoaded.then(() => {\n      return loadStylesheetIcon(iconName);\n    });\n  }\n}\nfunction loadStylesheetIcon(iconName) {\n  const cssVarIcon = documentStyles?.getPropertyValue(`--fk-icon-${iconName}`);\n  if (cssVarIcon) {\n    const icon = atob(cssVarIcon);\n    if (icon.startsWith(\"<svg\")) {\n      iconRegistry[iconName] = icon;\n      return icon;\n    }\n  }\n  return void 0;\n}\nfunction getRemoteIcon(iconName, iconLoaderUrl) {\n  const formkitVersion = FORMKIT_VERSION.startsWith(\"__\") ? \"latest\" : FORMKIT_VERSION;\n  const fetchUrl = typeof iconLoaderUrl === \"function\" ? iconLoaderUrl(iconName) : `https://cdn.jsdelivr.net/npm/@formkit/icons@${formkitVersion}/dist/icons/${iconName}.svg`;\n  if (!isClient)\n    return void 0;\n  return fetch(`${fetchUrl}`).then(async (r) => {\n    const icon = await r.text();\n    if (icon.startsWith(\"<svg\")) {\n      return icon;\n    }\n    return void 0;\n  }).catch((e) => {\n    console.error(e);\n    return void 0;\n  });\n}\nfunction loadIconPropIcons(node, iconHandler) {\n  const iconRegex = /^[a-zA-Z-]+(?:-icon|Icon)$/;\n  const iconProps = Object.keys(node.props).filter((prop) => {\n    return iconRegex.test(prop);\n  });\n  iconProps.forEach((sectionKey) => {\n    return loadPropIcon(node, iconHandler, sectionKey);\n  });\n}\nfunction loadPropIcon(node, iconHandler, sectionKey) {\n  const iconName = node.props[sectionKey];\n  const loadedIcon = iconHandler(iconName);\n  const rawIconProp = `_raw${sectionKey.charAt(0).toUpperCase()}${sectionKey.slice(1)}`;\n  const clickHandlerProp = `on${sectionKey.charAt(0).toUpperCase()}${sectionKey.slice(1)}Click`;\n  node.addProps([rawIconProp, clickHandlerProp]);\n  node.on(`prop:${sectionKey}`, reloadIcon);\n  if (loadedIcon instanceof Promise) {\n    return loadedIcon.then((svg) => {\n      node.props[rawIconProp] = svg;\n    });\n  } else {\n    node.props[rawIconProp] = loadedIcon;\n  }\n  return;\n}\nfunction reloadIcon(event) {\n  const node = event.origin;\n  const iconName = event.payload;\n  const iconHandler = node?.props?.iconHandler;\n  const sectionKey = event.name.split(\":\")[1];\n  const rawIconProp = `_raw${sectionKey.charAt(0).toUpperCase()}${sectionKey.slice(1)}`;\n  if (iconHandler && typeof iconHandler === \"function\") {\n    const loadedIcon = iconHandler(iconName);\n    if (loadedIcon instanceof Promise) {\n      return loadedIcon.then((svg) => {\n        node.props[rawIconProp] = svg;\n      });\n    } else {\n      node.props[rawIconProp] = loadedIcon;\n    }\n  }\n}\n\nexport { createIconHandler, createThemePlugin, generateClasses, iconRegistry };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.mjs.map",
      "start": 1709718916285,
      "end": 1709718916361,
      "sourcemaps": null
    },
    {
      "name": "unplugin-formkit",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709718916361,
      "end": 1709718916361,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718916361,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    }
  ]
}
