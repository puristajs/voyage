{
  "resolvedId": "/Users/sebastianwessel/projekte/voyage/node_modules/@formkit/inputs/dist/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { extend, camel, has, slugify, undefine, eq, token, clone, isObject, isPojo } from '@formkit/utils';\nimport { createMessage, warn, isConditional, isComponent, isDOM } from '@formkit/core';\n\n// packages/inputs/src/plugin.ts\nfunction createLibraryPlugin(...libraries) {\n  const library = libraries.reduce(\n    (merged, lib) => extend(merged, lib),\n    {}\n  );\n  const plugin = () => {\n  };\n  plugin.library = function(node) {\n    const type = camel(node.props.type);\n    if (has(library, type)) {\n      node.define(library[type]);\n    }\n  };\n  return plugin;\n}\n\n// packages/inputs/src/props.ts\nvar runtimeProps = [\n  \"classes\",\n  \"config\",\n  \"delay\",\n  \"errors\",\n  \"id\",\n  \"index\",\n  \"inputErrors\",\n  \"modelValue\",\n  \"onUpdate:modelValue\",\n  \"name\",\n  \"number\",\n  \"parent\",\n  \"plugins\",\n  \"sectionsSchema\",\n  \"type\",\n  \"validation\",\n  \"validationLabel\",\n  \"validationMessages\",\n  \"validationRules\",\n  // Runtime event props:\n  \"onInput\",\n  \"onInputRaw\",\n  \"onUpdate:modelValue\",\n  \"onNode\",\n  \"onSubmit\",\n  \"onSubmitInvalid\",\n  \"onSubmitRaw\"\n];\nfunction isGroupOption(option2) {\n  return option2 && typeof option2 === \"object\" && \"group\" in option2 && Array.isArray(option2.options);\n}\nfunction normalizeOptions(options2, i = { count: 1 }) {\n  if (Array.isArray(options2)) {\n    return options2.map(\n      (option2) => {\n        if (typeof option2 === \"string\" || typeof option2 === \"number\") {\n          return {\n            label: String(option2),\n            value: String(option2)\n          };\n        }\n        if (typeof option2 == \"object\") {\n          if (\"group\" in option2) {\n            option2.options = normalizeOptions(option2.options || [], i);\n            return option2;\n          } else if (\"value\" in option2 && typeof option2.value !== \"string\") {\n            Object.assign(option2, {\n              value: `__mask_${i.count++}`,\n              __original: option2.value\n            });\n          }\n        }\n        return option2;\n      }\n    );\n  }\n  return Object.keys(options2).map((value) => {\n    return {\n      label: options2[value],\n      value\n    };\n  });\n}\nfunction optionValue(options2, value, undefinedIfNotFound = false) {\n  if (Array.isArray(options2)) {\n    for (const option2 of options2) {\n      if (typeof option2 !== \"object\" && option2)\n        continue;\n      if (isGroupOption(option2)) {\n        const found = optionValue(option2.options, value, true);\n        if (found !== void 0) {\n          return found;\n        }\n      } else if (value == option2.value) {\n        return \"__original\" in option2 ? option2.__original : option2.value;\n      }\n    }\n  }\n  return undefinedIfNotFound ? void 0 : value;\n}\nfunction shouldSelect(valueA, valueB) {\n  if (valueA === null && valueB === void 0 || valueA === void 0 && valueB === null)\n    return false;\n  if (valueA == valueB)\n    return true;\n  if (isPojo(valueA) && isPojo(valueB))\n    return eq(valueA, valueB);\n  return false;\n}\nfunction options(node) {\n  node.hook.prop((prop, next) => {\n    var _a;\n    if (prop.prop === \"options\") {\n      if (typeof prop.value === \"function\") {\n        node.props.optionsLoader = prop.value;\n        prop.value = [];\n      } else {\n        (_a = node.props)._normalizeCounter ?? (_a._normalizeCounter = { count: 1 });\n        prop.value = normalizeOptions(prop.value, node.props._normalizeCounter);\n      }\n    }\n    return next(prop);\n  });\n}\n// @__NO_SIDE_EFFECTS__\nfunction createSection(section, el, fragment2 = false) {\n  return (...children) => {\n    const extendable = (extensions) => {\n      const node = !el || typeof el === \"string\" ? { $el: el } : el();\n      if (isDOM(node) || isComponent(node)) {\n        if (!node.meta) {\n          node.meta = { section };\n        }\n        if (children.length && !node.children) {\n          node.children = [\n            ...children.map(\n              (child) => typeof child === \"function\" ? child(extensions) : child\n            )\n          ];\n        }\n        if (isDOM(node)) {\n          node.attrs = {\n            class: `$classes.${section}`,\n            ...node.attrs || {}\n          };\n        }\n      }\n      return {\n        if: `$slots.${section}`,\n        then: `$slots.${section}`,\n        else: section in extensions ? /* @__PURE__ */ extendSchema(node, extensions[section]) : node\n      };\n    };\n    extendable._s = section;\n    return fragment2 ? /* @__PURE__ */ createRoot(extendable) : extendable;\n  };\n}\n// @__NO_SIDE_EFFECTS__\nfunction createRoot(rootSection) {\n  return (extensions) => {\n    return [rootSection(extensions)];\n  };\n}\nfunction isSchemaObject(schema) {\n  return !!(schema && typeof schema === \"object\" && (\"$el\" in schema || \"$cmp\" in schema || \"$formkit\" in schema));\n}\n// @__NO_SIDE_EFFECTS__\nfunction extendSchema(schema, extension = {}) {\n  if (typeof schema === \"string\") {\n    return isSchemaObject(extension) || typeof extension === \"string\" ? extension : schema;\n  } else if (Array.isArray(schema)) {\n    return isSchemaObject(extension) ? extension : schema;\n  }\n  return extend(schema, extension);\n}\n\n// packages/inputs/src/sections/actions.ts\nvar actions = createSection(\"actions\", () => ({\n  $el: \"div\",\n  if: \"$actions\"\n}));\n\n// packages/inputs/src/sections/box.ts\nvar box = createSection(\"input\", () => ({\n  $el: \"input\",\n  bind: \"$attrs\",\n  attrs: {\n    type: \"$type\",\n    name: \"$node.props.altName || $node.name\",\n    disabled: \"$option.attrs.disabled || $disabled\",\n    onInput: \"$handlers.toggleChecked\",\n    checked: \"$fns.eq($_value, $onValue)\",\n    onBlur: \"$handlers.blur\",\n    value: \"$: true\",\n    id: \"$id\",\n    \"aria-describedby\": {\n      if: \"$options.length\",\n      then: {\n        if: \"$option.help\",\n        then: '$: \"help-\" + $option.attrs.id',\n        else: void 0\n      },\n      else: {\n        if: \"$help\",\n        then: '$: \"help-\" + $id',\n        else: void 0\n      }\n    }\n  }\n}));\n\n// packages/inputs/src/sections/boxHelp.ts\nvar boxHelp = createSection(\"optionHelp\", () => ({\n  $el: \"div\",\n  if: \"$option.help\",\n  attrs: {\n    id: '$: \"help-\" + $option.attrs.id'\n  }\n}));\n\n// packages/inputs/src/sections/boxInner.ts\nvar boxInner = createSection(\"inner\", \"span\");\n\n// packages/inputs/src/sections/boxLabel.ts\nvar boxLabel = createSection(\"label\", \"span\");\n\n// packages/inputs/src/sections/boxOption.ts\nvar boxOption = createSection(\"option\", () => ({\n  $el: \"li\",\n  for: [\"option\", \"$options\"],\n  attrs: {\n    \"data-disabled\": \"$option.attrs.disabled || $disabled || undefined\"\n  }\n}));\n\n// packages/inputs/src/sections/boxOptions.ts\nvar boxOptions = createSection(\"options\", \"ul\");\n\n// packages/inputs/src/sections/boxWrapper.ts\nvar boxWrapper = createSection(\"wrapper\", () => ({\n  $el: \"label\",\n  attrs: {\n    \"data-disabled\": {\n      if: \"$options.length\",\n      then: void 0,\n      else: \"$disabled || undefined\"\n    },\n    \"data-checked\": {\n      if: \"$options == undefined\",\n      then: \"$fns.eq($_value, $onValue) || undefined\",\n      else: \"$fns.isChecked($option.value) || undefined\"\n    }\n  }\n}));\n\n// packages/inputs/src/sections/buttonInput.ts\nvar buttonInput = createSection(\"input\", () => ({\n  $el: \"button\",\n  bind: \"$attrs\",\n  attrs: {\n    type: \"$type\",\n    disabled: \"$disabled\",\n    name: \"$node.name\",\n    id: \"$id\"\n  }\n}));\n\n// packages/inputs/src/sections/buttonLabel.ts\nvar buttonLabel = createSection(\"default\", null);\n\n// packages/inputs/src/sections/decorator.ts\nvar decorator = createSection(\"decorator\", () => ({\n  $el: \"span\",\n  attrs: {\n    \"aria-hidden\": \"true\"\n  }\n}));\n\n// packages/inputs/src/sections/fieldset.ts\nvar fieldset = createSection(\"fieldset\", () => ({\n  $el: \"fieldset\",\n  attrs: {\n    id: \"$id\",\n    \"aria-describedby\": {\n      if: \"$help\",\n      then: '$: \"help-\" + $id',\n      else: void 0\n    }\n  }\n}));\n\n// packages/inputs/src/sections/fileInput.ts\nvar fileInput = createSection(\"input\", () => ({\n  $el: \"input\",\n  bind: \"$attrs\",\n  attrs: {\n    type: \"file\",\n    disabled: \"$disabled\",\n    name: \"$node.name\",\n    onChange: \"$handlers.files\",\n    onBlur: \"$handlers.blur\",\n    id: \"$id\",\n    \"aria-describedby\": \"$describedBy\",\n    \"aria-required\": \"$state.required || undefined\"\n  }\n}));\n\n// packages/inputs/src/sections/fileItem.ts\nvar fileItem = createSection(\"fileItem\", () => ({\n  $el: \"li\",\n  for: [\"file\", \"$value\"]\n}));\n\n// packages/inputs/src/sections/fileList.ts\nvar fileList = createSection(\"fileList\", () => ({\n  $el: \"ul\",\n  if: \"$value.length\",\n  attrs: {\n    \"data-has-multiple\": \"$_hasMultipleFiles\"\n  }\n}));\n\n// packages/inputs/src/sections/fileName.ts\nvar fileName = createSection(\"fileName\", () => ({\n  $el: \"span\",\n  attrs: {\n    class: \"$classes.fileName\"\n  }\n}));\n\n// packages/inputs/src/sections/fileRemove.ts\nvar fileRemove = createSection(\"fileRemove\", () => ({\n  $el: \"button\",\n  attrs: {\n    type: \"button\",\n    onClick: \"$handlers.resetFiles\"\n  }\n}));\n\n// packages/inputs/src/sections/formInput.ts\nvar formInput = createSection(\"form\", () => ({\n  $el: \"form\",\n  bind: \"$attrs\",\n  attrs: {\n    id: \"$id\",\n    name: \"$node.name\",\n    onSubmit: \"$handlers.submit\",\n    \"data-loading\": \"$state.loading || undefined\"\n  }\n}));\n\n// packages/inputs/src/sections/fragment.ts\nvar fragment = createSection(\"wrapper\", null, true);\n\n// packages/inputs/src/sections/help.ts\nvar help = createSection(\"help\", () => ({\n  $el: \"div\",\n  if: \"$help\",\n  attrs: {\n    id: '$: \"help-\" + $id'\n  }\n}));\n\n// packages/inputs/src/sections/icon.ts\nvar icon = (sectionKey, el) => {\n  return createSection(`${sectionKey}Icon`, () => {\n    const rawIconProp = `_raw${sectionKey.charAt(0).toUpperCase()}${sectionKey.slice(1)}Icon`;\n    return {\n      if: `$${sectionKey}Icon && $${rawIconProp}`,\n      $el: `${el ? el : \"span\"}`,\n      attrs: {\n        class: `$classes.${sectionKey}Icon + \" \" + $classes.icon`,\n        innerHTML: `$${rawIconProp}`,\n        onClick: `$handlers.iconClick(${sectionKey})`,\n        for: {\n          if: `${el === \"label\"}`,\n          then: \"$id\"\n        }\n      }\n    };\n  })();\n};\n\n// packages/inputs/src/sections/inner.ts\nvar inner = createSection(\"inner\", \"div\");\n\n// packages/inputs/src/sections/label.ts\nvar label = createSection(\"label\", () => ({\n  $el: \"label\",\n  if: \"$label\",\n  attrs: {\n    for: \"$id\"\n  }\n}));\n\n// packages/inputs/src/sections/legend.ts\nvar legend = createSection(\"legend\", () => ({\n  $el: \"legend\",\n  if: \"$label\"\n}));\n\n// packages/inputs/src/sections/message.ts\nvar message = createSection(\"message\", () => ({\n  $el: \"li\",\n  for: [\"message\", \"$messages\"],\n  attrs: {\n    key: \"$message.key\",\n    id: `$id + '-' + $message.key`,\n    \"data-message-type\": \"$message.type\"\n  }\n}));\n\n// packages/inputs/src/sections/messages.ts\nvar messages = createSection(\"messages\", () => ({\n  $el: \"ul\",\n  if: \"$defaultMessagePlacement && $fns.length($messages)\"\n}));\n\n// packages/inputs/src/sections/noFiles.ts\nvar noFiles = createSection(\"noFiles\", () => ({\n  $el: \"span\",\n  if: \"$value.length == 0\"\n}));\n\n// packages/inputs/src/sections/optGroup.ts\nvar optGroup = createSection(\"optGroup\", () => ({\n  $el: \"optgroup\",\n  bind: \"$option.attrs\",\n  attrs: {\n    label: \"$option.group\"\n  }\n}));\n\n// packages/inputs/src/sections/option.ts\nvar option = createSection(\"option\", () => ({\n  $el: \"option\",\n  bind: \"$option.attrs\",\n  attrs: {\n    class: \"$classes.option\",\n    value: \"$option.value\",\n    selected: \"$fns.isSelected($option)\"\n  }\n}));\n\n// packages/inputs/src/sections/optionSlot.ts\nvar optionSlot = createSection(\"options\", () => ({\n  $el: null,\n  if: \"$options.length\",\n  for: [\"option\", \"$option.options || $options\"]\n}));\n\n// packages/inputs/src/sections/outer.ts\nvar outer = createSection(\"outer\", () => ({\n  $el: \"div\",\n  attrs: {\n    key: \"$id\",\n    \"data-family\": \"$family || undefined\",\n    \"data-type\": \"$type\",\n    \"data-multiple\": '$attrs.multiple || ($type != \"select\" && $options != undefined) || undefined',\n    \"data-has-multiple\": \"$_hasMultipleFiles\",\n    \"data-disabled\": '$: ($disabled !== \"false\" && $disabled) || undefined',\n    \"data-empty\": \"$state.empty || undefined\",\n    \"data-complete\": \"$state.complete || undefined\",\n    \"data-invalid\": \"$state.valid === false && $state.validationVisible || undefined\",\n    \"data-errors\": \"$state.errors || undefined\",\n    \"data-submitted\": \"$state.submitted || undefined\",\n    \"data-prefix-icon\": \"$_rawPrefixIcon !== undefined || undefined\",\n    \"data-suffix-icon\": \"$_rawSuffixIcon !== undefined || undefined\",\n    \"data-prefix-icon-click\": \"$onPrefixIconClick !== undefined || undefined\",\n    \"data-suffix-icon-click\": \"$onSuffixIconClick !== undefined || undefined\"\n  }\n}));\n\n// packages/inputs/src/sections/prefix.ts\nvar prefix = createSection(\"prefix\", null);\n\n// packages/inputs/src/sections/selectInput.ts\nvar selectInput = createSection(\"input\", () => ({\n  $el: \"select\",\n  bind: \"$attrs\",\n  attrs: {\n    id: \"$id\",\n    \"data-placeholder\": \"$fns.showPlaceholder($_value, $placeholder)\",\n    disabled: \"$disabled\",\n    class: \"$classes.input\",\n    name: \"$node.name\",\n    onChange: \"$handlers.onChange\",\n    onInput: \"$handlers.selectInput\",\n    onBlur: \"$handlers.blur\",\n    \"aria-describedby\": \"$describedBy\",\n    \"aria-required\": \"$state.required || undefined\"\n  }\n}));\n\n// packages/inputs/src/sections/submitInput.ts\nvar submitInput = createSection(\"submit\", () => ({\n  $cmp: \"FormKit\",\n  bind: \"$submitAttrs\",\n  props: {\n    type: \"submit\",\n    label: \"$submitLabel\"\n  }\n}));\n\n// packages/inputs/src/sections/suffix.ts\nvar suffix = createSection(\"suffix\", null);\n\n// packages/inputs/src/sections/textInput.ts\nvar textInput = createSection(\"input\", () => ({\n  $el: \"input\",\n  bind: \"$attrs\",\n  attrs: {\n    type: \"$type\",\n    disabled: \"$disabled\",\n    name: \"$node.name\",\n    onInput: \"$handlers.DOMInput\",\n    onBlur: \"$handlers.blur\",\n    value: \"$_value\",\n    id: \"$id\",\n    \"aria-describedby\": \"$describedBy\",\n    \"aria-required\": \"$state.required || undefined\"\n  }\n}));\n\n// packages/inputs/src/sections/textareaInput.ts\nvar textareaInput = createSection(\"input\", () => ({\n  $el: \"textarea\",\n  bind: \"$attrs\",\n  attrs: {\n    disabled: \"$disabled\",\n    name: \"$node.name\",\n    onInput: \"$handlers.DOMInput\",\n    onBlur: \"$handlers.blur\",\n    value: \"$_value\",\n    id: \"$id\",\n    \"aria-describedby\": \"$describedBy\",\n    \"aria-required\": \"$state.required || undefined\"\n  },\n  children: \"$initialValue\"\n}));\n\n// packages/inputs/src/sections/wrapper.ts\nvar wrapper = createSection(\"wrapper\", \"div\");\nfunction normalizeBoxes(node) {\n  return function(prop, next) {\n    if (prop.prop === \"options\" && Array.isArray(prop.value)) {\n      prop.value = prop.value.map((option2) => {\n        if (!option2.attrs?.id) {\n          return extend(option2, {\n            attrs: {\n              id: `${node.props.id}-option-${slugify(String(option2.value))}`\n            }\n          });\n        }\n        return option2;\n      });\n      if (node.props.type === \"checkbox\" && !Array.isArray(node.value)) {\n        if (node.isCreated) {\n          node.input([], false);\n        } else {\n          node.on(\"created\", () => {\n            if (!Array.isArray(node.value)) {\n              node.input([], false);\n            }\n          });\n        }\n      }\n    }\n    return next(prop);\n  };\n}\n\n// packages/inputs/src/features/checkboxes.ts\nfunction toggleChecked(node, e) {\n  const el = e.target;\n  if (el instanceof HTMLInputElement) {\n    const value = Array.isArray(node.props.options) ? optionValue(node.props.options, el.value) : el.value;\n    if (Array.isArray(node.props.options) && node.props.options.length) {\n      if (!Array.isArray(node._value)) {\n        node.input([value]);\n      } else if (!node._value.some((existingValue) => shouldSelect(value, existingValue))) {\n        node.input([...node._value, value]);\n      } else {\n        node.input(\n          node._value.filter(\n            (existingValue) => !shouldSelect(value, existingValue)\n          )\n        );\n      }\n    } else {\n      if (el.checked) {\n        node.input(node.props.onValue);\n      } else {\n        node.input(node.props.offValue);\n      }\n    }\n  }\n}\nfunction isChecked(node, value) {\n  node.context?.value;\n  node.context?._value;\n  if (Array.isArray(node._value)) {\n    return node._value.some(\n      (existingValue) => shouldSelect(optionValue(node.props.options, value), existingValue)\n    );\n  }\n  return false;\n}\nfunction checkboxes(node) {\n  node.on(\"created\", () => {\n    if (node.context?.handlers) {\n      node.context.handlers.toggleChecked = toggleChecked.bind(null, node);\n    }\n    if (node.context?.fns) {\n      node.context.fns.isChecked = isChecked.bind(null, node);\n    }\n    if (!has(node.props, \"onValue\"))\n      node.props.onValue = true;\n    if (!has(node.props, \"offValue\"))\n      node.props.offValue = false;\n  });\n  node.hook.prop(normalizeBoxes(node));\n}\n\n// packages/inputs/src/features/icon.ts\nfunction defaultIcon(sectionKey, defaultIcon2) {\n  return (node) => {\n    if (node.props[`${sectionKey}Icon`] === void 0) {\n      node.props[`${sectionKey}Icon`] = defaultIcon2.startsWith(\"<svg\") ? defaultIcon2 : `default:${defaultIcon2}`;\n    }\n  };\n}\nfunction disables(node) {\n  node.on(\"created\", () => {\n    if (\"disabled\" in node.props) {\n      node.props.disabled = undefine(node.props.disabled);\n      node.config.disabled = undefine(node.props.disabled);\n    }\n  });\n  node.hook.prop(({ prop, value }, next) => {\n    value = prop === \"disabled\" ? undefine(value) : value;\n    return next({ prop, value });\n  });\n  node.on(\"prop:disabled\", ({ payload: value }) => {\n    node.config.disabled = undefine(value);\n  });\n}\nfunction localize(key, value) {\n  return (node) => {\n    node.store.set(\n      createMessage({\n        key,\n        type: \"ui\",\n        value: value || key,\n        meta: {\n          localize: true,\n          i18nArgs: [node]\n        }\n      })\n    );\n  };\n}\n\n// packages/inputs/src/features/files.ts\nvar isBrowser = typeof window !== \"undefined\";\nfunction removeHover(e) {\n  if (e.target instanceof HTMLElement && e.target.hasAttribute(\"data-file-hover\")) {\n    e.target.removeAttribute(\"data-file-hover\");\n  }\n}\nfunction preventStrayDrop(type, e) {\n  if (!(e.target instanceof HTMLInputElement)) {\n    e.preventDefault();\n  } else if (type === \"dragover\") {\n    e.target.setAttribute(\"data-file-hover\", \"true\");\n  }\n  if (type === \"drop\") {\n    removeHover(e);\n  }\n}\nfunction files(node) {\n  localize(\"noFiles\", \"Select file\")(node);\n  localize(\"removeAll\", \"Remove all\")(node);\n  localize(\"remove\")(node);\n  node.addProps([\"_hasMultipleFiles\"]);\n  if (isBrowser) {\n    if (!window._FormKit_File_Drop) {\n      window.addEventListener(\n        \"dragover\",\n        preventStrayDrop.bind(null, \"dragover\")\n      );\n      window.addEventListener(\"drop\", preventStrayDrop.bind(null, \"drop\"));\n      window.addEventListener(\"dragleave\", removeHover);\n      window._FormKit_File_Drop = true;\n    }\n  }\n  node.hook.input((value, next) => next(Array.isArray(value) ? value : []));\n  node.on(\"input\", ({ payload: value }) => {\n    node.props._hasMultipleFiles = Array.isArray(value) && value.length > 1 ? true : void 0;\n  });\n  node.on(\"reset\", () => {\n    if (node.props.id && isBrowser) {\n      const el = document.getElementById(node.props.id);\n      if (el)\n        el.value = \"\";\n    }\n  });\n  node.on(\"created\", () => {\n    if (!Array.isArray(node.value))\n      node.input([], false);\n    if (!node.context)\n      return;\n    node.context.handlers.resetFiles = (e) => {\n      e.preventDefault();\n      node.input([]);\n      if (node.props.id && isBrowser) {\n        const el = document.getElementById(node.props.id);\n        if (el)\n          el.value = \"\";\n        el?.focus();\n      }\n    };\n    node.context.handlers.files = (e) => {\n      const files2 = [];\n      if (e.target instanceof HTMLInputElement && e.target.files) {\n        for (let i = 0; i < e.target.files.length; i++) {\n          let file2;\n          if (file2 = e.target.files.item(i)) {\n            files2.push({ name: file2.name, file: file2 });\n          }\n        }\n        node.input(files2);\n      }\n      if (node.context)\n        node.context.files = files2;\n      if (typeof node.props.attrs?.onChange === \"function\") {\n        node.props.attrs?.onChange(e);\n      }\n    };\n  });\n}\nvar loading = createMessage({\n  key: \"loading\",\n  value: true,\n  visible: false\n});\nasync function handleSubmit(node, submitEvent) {\n  const submitNonce = Math.random();\n  node.props._submitNonce = submitNonce;\n  submitEvent.preventDefault();\n  await node.settled;\n  if (node.ledger.value(\"validating\")) {\n    node.store.set(loading);\n    await node.ledger.settled(\"validating\");\n    node.store.remove(\"loading\");\n    if (node.props._submitNonce !== submitNonce)\n      return;\n  }\n  const setSubmitted = (n) => n.store.set(\n    createMessage({\n      key: \"submitted\",\n      value: true,\n      visible: false\n    })\n  );\n  node.walk(setSubmitted);\n  setSubmitted(node);\n  node.emit(\"submit-raw\");\n  if (typeof node.props.onSubmitRaw === \"function\") {\n    node.props.onSubmitRaw(submitEvent, node);\n  }\n  if (node.ledger.value(\"blocking\")) {\n    if (typeof node.props.onSubmitInvalid === \"function\") {\n      node.props.onSubmitInvalid(node);\n    }\n    if (node.props.incompleteMessage !== false) {\n      setIncompleteMessage(node);\n    }\n  } else {\n    if (typeof node.props.onSubmit === \"function\") {\n      const retVal = node.props.onSubmit(\n        node.hook.submit.dispatch(clone(node.value)),\n        node\n      );\n      if (retVal instanceof Promise) {\n        const autoDisable = node.props.disabled === void 0 && node.props.submitBehavior !== \"live\";\n        if (autoDisable)\n          node.props.disabled = true;\n        node.store.set(loading);\n        await retVal;\n        if (autoDisable)\n          node.props.disabled = false;\n        node.store.remove(\"loading\");\n      }\n    } else {\n      if (submitEvent.target instanceof HTMLFormElement) {\n        submitEvent.target.submit();\n      }\n    }\n  }\n}\nfunction setIncompleteMessage(node) {\n  node.store.set(\n    createMessage({\n      blocking: false,\n      key: `incomplete`,\n      meta: {\n        localize: node.props.incompleteMessage === void 0,\n        i18nArgs: [{ node }],\n        showAsMessage: true\n      },\n      type: \"ui\",\n      value: node.props.incompleteMessage || \"Form incomplete.\"\n    })\n  );\n}\nfunction form(node) {\n  var _a;\n  node.props.isForm = true;\n  node.ledger.count(\"validating\", (m) => m.key === \"validating\");\n  (_a = node.props).submitAttrs ?? (_a.submitAttrs = {\n    disabled: node.props.disabled\n  });\n  node.on(\"prop:disabled\", ({ payload: disabled }) => {\n    node.props.submitAttrs = { ...node.props.submitAttrs, disabled };\n  });\n  node.on(\"created\", () => {\n    if (node.context?.handlers) {\n      node.context.handlers.submit = handleSubmit.bind(null, node);\n    }\n    if (!has(node.props, \"actions\")) {\n      node.props.actions = true;\n    }\n  });\n  node.on(\"prop:incompleteMessage\", () => {\n    if (node.store.incomplete)\n      setIncompleteMessage(node);\n  });\n  node.on(\"settled:blocking\", () => node.store.remove(\"incomplete\"));\n}\n\n// packages/inputs/src/features/ignores.ts\nfunction ignore(node) {\n  if (node.props.ignore === void 0) {\n    node.props.ignore = true;\n    node.parent = null;\n  }\n}\n\n// packages/inputs/src/features/initialValue.ts\nfunction initialValue(node) {\n  node.on(\"created\", () => {\n    if (node.context) {\n      node.context.initialValue = node.value || \"\";\n    }\n  });\n}\n\n// packages/inputs/src/features/casts.ts\nfunction casts(node) {\n  if (typeof node.props.number === \"undefined\")\n    return;\n  const strict = [\"number\", \"range\", \"hidden\"].includes(node.props.type);\n  node.hook.input((value, next) => {\n    if (value === \"\")\n      return next(void 0);\n    const numericValue = node.props.number === \"integer\" ? parseInt(value) : parseFloat(value);\n    if (!Number.isFinite(numericValue))\n      return strict ? next(void 0) : next(value);\n    return next(numericValue);\n  });\n}\nfunction toggleChecked2(node, event) {\n  if (event.target instanceof HTMLInputElement) {\n    node.input(optionValue(node.props.options, event.target.value));\n  }\n}\nfunction isChecked2(node, value) {\n  node.context?.value;\n  node.context?._value;\n  return shouldSelect(optionValue(node.props.options, value), node._value);\n}\nfunction radios(node) {\n  node.on(\"created\", () => {\n    if (!Array.isArray(node.props.options)) {\n      warn(350, {\n        node,\n        inputType: \"radio\"\n      });\n    }\n    if (node.context?.handlers) {\n      node.context.handlers.toggleChecked = toggleChecked2.bind(null, node);\n    }\n    if (node.context?.fns) {\n      node.context.fns.isChecked = isChecked2.bind(null, node);\n    }\n  });\n  node.hook.prop(normalizeBoxes(node));\n}\n\n// packages/inputs/src/features/renamesRadios.ts\nvar radioInstance = 0;\nfunction renamesRadios(node) {\n  if (node.type === \"group\" || node.type === \"list\") {\n    node.plugins.add(renamesRadiosPlugin);\n  }\n}\nfunction renamesRadiosPlugin(node) {\n  if (node.props.type === \"radio\") {\n    node.addProps([\"altName\"]);\n    node.props.altName = `${node.name}_${radioInstance++}`;\n  }\n}\nfunction isSelected(node, option2) {\n  if (isGroupOption(option2))\n    return false;\n  node.context && node.context.value;\n  const optionValue2 = \"__original\" in option2 ? option2.__original : option2.value;\n  return Array.isArray(node._value) ? node._value.some((optionA) => shouldSelect(optionA, optionValue2)) : (node._value === void 0 || node._value === null && !containsValue(node.props.options, null)) && option2.attrs && option2.attrs[\"data-is-placeholder\"] ? true : shouldSelect(optionValue2, node._value);\n}\nfunction containsValue(options2, value) {\n  return options2.some((option2) => {\n    if (isGroupOption(option2)) {\n      return containsValue(option2.options, value);\n    } else {\n      return (\"__original\" in option2 ? option2.__original : option2.value) === value;\n    }\n  });\n}\nasync function deferChange(node, e) {\n  if (typeof node.props.attrs?.onChange === \"function\") {\n    await new Promise((r) => setTimeout(r, 0));\n    await node.settled;\n    node.props.attrs.onChange(e);\n  }\n}\nfunction selectInput2(node, e) {\n  const target = e.target;\n  const value = target.hasAttribute(\"multiple\") ? Array.from(target.selectedOptions).map(\n    (o) => optionValue(node.props.options, o.value)\n  ) : optionValue(node.props.options, target.value);\n  node.input(value);\n}\nfunction applyPlaceholder(options2, placeholder) {\n  if (!options2.some(\n    (option2) => option2.attrs && option2.attrs[\"data-is-placeholder\"]\n  )) {\n    return [\n      {\n        label: placeholder,\n        value: \"\",\n        attrs: {\n          hidden: true,\n          disabled: true,\n          \"data-is-placeholder\": \"true\"\n        }\n      },\n      ...options2\n    ];\n  }\n  return options2;\n}\nfunction firstValue(options2) {\n  const option2 = options2.length > 0 ? options2[0] : void 0;\n  if (!option2)\n    return void 0;\n  if (isGroupOption(option2))\n    return firstValue(option2.options);\n  return \"__original\" in option2 ? option2.__original : option2.value;\n}\nfunction select(node) {\n  node.on(\"created\", () => {\n    const isMultiple = undefine(node.props.attrs?.multiple);\n    if (!isMultiple && node.props.placeholder && Array.isArray(node.props.options)) {\n      node.hook.prop(({ prop, value }, next) => {\n        if (prop === \"options\") {\n          value = applyPlaceholder(value, node.props.placeholder);\n        }\n        return next({ prop, value });\n      });\n      node.props.options = applyPlaceholder(\n        node.props.options,\n        node.props.placeholder\n      );\n    }\n    if (isMultiple) {\n      if (node.value === void 0) {\n        node.input([], false);\n      }\n    } else if (node.context && !node.context.options) {\n      node.props.attrs = Object.assign({}, node.props.attrs, {\n        value: node._value\n      });\n      node.on(\"input\", ({ payload }) => {\n        node.props.attrs = Object.assign({}, node.props.attrs, {\n          value: payload\n        });\n      });\n    }\n    if (node.context?.handlers) {\n      node.context.handlers.selectInput = selectInput2.bind(null, node);\n      node.context.handlers.onChange = deferChange.bind(null, node);\n    }\n    if (node.context?.fns) {\n      node.context.fns.isSelected = isSelected.bind(null, node);\n      node.context.fns.showPlaceholder = (value, placeholder) => {\n        if (!Array.isArray(node.props.options))\n          return false;\n        const hasMatchingValue = node.props.options.some(\n          (option2) => {\n            if (option2.attrs && \"data-is-placeholder\" in option2.attrs)\n              return false;\n            const optionValue2 = \"__original\" in option2 ? option2.__original : option2.value;\n            return eq(value, optionValue2);\n          }\n        );\n        return placeholder && !hasMatchingValue ? true : void 0;\n      };\n    }\n  });\n  node.hook.input((value, next) => {\n    if (!node.props.placeholder && value === void 0 && Array.isArray(node.props?.options) && node.props.options.length && !undefine(node.props?.attrs?.multiple)) {\n      value = firstValue(node.props.options);\n    }\n    return next(value);\n  });\n}\n\n// packages/inputs/src/compose.ts\n// @__NO_SIDE_EFFECTS__\nfunction isSlotCondition(node) {\n  if (isConditional(node) && node.if && node.if.startsWith(\"$slots.\") && typeof node.then === \"string\" && node.then.startsWith(\"$slots.\") && \"else\" in node) {\n    return true;\n  }\n  return false;\n}\n// @__NO_SIDE_EFFECTS__\nfunction findSection(schema, target) {\n  return eachSection(\n    schema,\n    (section, sectionCondition, parent) => {\n      if (section.meta?.section === target) {\n        return [parent, sectionCondition];\n      }\n      return;\n    },\n    true\n  ) ?? [false, false];\n}\nfunction eachSection(schema, callback, stopOnCallbackReturn = false, schemaParent) {\n  if (Array.isArray(schema)) {\n    for (const node of schema) {\n      const callbackReturn = eachSection(\n        node,\n        callback,\n        stopOnCallbackReturn,\n        schema\n      );\n      if (callbackReturn && stopOnCallbackReturn) {\n        return callbackReturn;\n      }\n    }\n    return;\n  }\n  if (isSection(schema)) {\n    const callbackReturn = callback(schema.else, schema, schemaParent);\n    if (callbackReturn && stopOnCallbackReturn) {\n      return callbackReturn;\n    }\n    return eachSection(schema.else, callback, stopOnCallbackReturn, schema);\n  } else if ((isComponent(schema) || isDOM(schema)) && schema.children) {\n    return eachSection(\n      schema.children,\n      callback,\n      stopOnCallbackReturn\n    );\n  } else if (isConditional(schema)) {\n    if (schema.then && typeof schema.then !== \"string\") {\n      eachSection(schema.then, callback, stopOnCallbackReturn, schema);\n    }\n    if (schema.else && typeof schema.else !== \"string\") {\n      eachSection(schema.else, callback, stopOnCallbackReturn, schema);\n    }\n  }\n}\nfunction isSection(section) {\n  if (isConditional(section) && typeof section.then === \"string\" && section.else && typeof section.else !== \"string\" && !Array.isArray(section.else) && !isConditional(section.else) && section.else.meta?.section) {\n    return true;\n  }\n  return false;\n}\n// @__NO_SIDE_EFFECTS__\nfunction useSchema(inputSection, sectionsSchema = {}) {\n  const schema = outer(\n    wrapper(\n      label(\"$label\"),\n      inner(icon(\"prefix\"), prefix(), inputSection(), suffix(), icon(\"suffix\"))\n    ),\n    help(\"$help\"),\n    messages(message(\"$message.value\"))\n  );\n  return (propSectionsSchema = {}) => schema(extend(sectionsSchema, propSectionsSchema));\n}\n// @__NO_SIDE_EFFECTS__\nfunction $attrs(attrs, section) {\n  const extendable = (extensions) => {\n    const node = section(extensions);\n    const attributes = typeof attrs === \"function\" ? attrs() : attrs;\n    if (!isObject(attributes))\n      return node;\n    if (/* @__PURE__ */ isSlotCondition(node) && isDOM(node.else)) {\n      node.else.attrs = { ...node.else.attrs, ...attributes };\n    } else if (isDOM(node)) {\n      node.attrs = { ...node.attrs, ...attributes };\n    }\n    return node;\n  };\n  extendable._s = section._s;\n  return extendable;\n}\n// @__NO_SIDE_EFFECTS__\nfunction $if(condition, then, otherwise) {\n  const extendable = (extensions) => {\n    const node = then(extensions);\n    if (otherwise || isSchemaObject(node) && \"if\" in node || /* @__PURE__ */ isSlotCondition(node)) {\n      const conditionalNode = {\n        if: condition,\n        then: node\n      };\n      if (otherwise) {\n        conditionalNode.else = otherwise(extensions);\n      }\n      return conditionalNode;\n    } else if (/* @__PURE__ */ isSlotCondition(node)) {\n      Object.assign(node.else, { if: condition });\n    } else if (isSchemaObject(node)) {\n      Object.assign(node, { if: condition });\n    }\n    return node;\n  };\n  extendable._s = token();\n  return extendable;\n}\n// @__NO_SIDE_EFFECTS__\nfunction $for(varName, inName, section) {\n  return (extensions) => {\n    const node = section(extensions);\n    if (/* @__PURE__ */ isSlotCondition(node)) {\n      Object.assign(node.else, { for: [varName, inName] });\n    } else if (isSchemaObject(node)) {\n      Object.assign(node, { for: [varName, inName] });\n    }\n    return node;\n  };\n}\n// @__NO_SIDE_EFFECTS__\nfunction $extend(section, extendWith) {\n  const extendable = (extensions) => {\n    const node = section({});\n    if (/* @__PURE__ */ isSlotCondition(node)) {\n      if (Array.isArray(node.else))\n        return node;\n      node.else = extendSchema(\n        extendSchema(node.else, extendWith),\n        section._s ? extensions[section._s] : {}\n      );\n      return node;\n    }\n    return extendSchema(\n      extendSchema(node, extendWith),\n      section._s ? extensions[section._s] : {}\n    );\n  };\n  extendable._s = section._s;\n  return extendable;\n}\n// @__NO_SIDE_EFFECTS__\nfunction $root(section) {\n  warn(800, \"$root\");\n  return createRoot(section);\n}\n\n// packages/inputs/src/inputs/button.ts\nvar button = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(\n    messages(message(\"$message.value\")),\n    wrapper(\n      buttonInput(\n        icon(\"prefix\"),\n        prefix(),\n        buttonLabel(\"$label || $ui.submit.value\"),\n        suffix(),\n        icon(\"suffix\")\n      )\n    ),\n    help(\"$help\")\n  ),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"input\",\n  /**\n   * The family of inputs this one belongs too. For example \"text\" and \"email\"\n   * are both part of the \"text\" family. This is primary used for styling.\n   */\n  family: \"button\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [localize(\"submit\"), ignore],\n  /**\n   * A key to use for memoizing the schema. This is used to prevent the schema\n   * from needing to be stringified when performing a memo lookup.\n   */\n  schemaMemoKey: \"h6st4epl3j8\"\n};\n\n// packages/inputs/src/inputs/checkbox.ts\nvar checkbox = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(\n    $if(\n      \"$options == undefined\",\n      /**\n       * Single checkbox structure.\n       */\n      boxWrapper(\n        boxInner(prefix(), box(), decorator(icon(\"decorator\")), suffix()),\n        $extend(boxLabel(\"$label\"), {\n          if: \"$label\"\n        })\n      ),\n      /**\n       * Multi checkbox structure.\n       */\n      fieldset(\n        legend(\"$label\"),\n        help(\"$help\"),\n        boxOptions(\n          boxOption(\n            boxWrapper(\n              boxInner(\n                prefix(),\n                $extend(box(), {\n                  bind: \"$option.attrs\",\n                  attrs: {\n                    id: \"$option.attrs.id\",\n                    value: \"$option.value\",\n                    checked: \"$fns.isChecked($option.value)\"\n                  }\n                }),\n                decorator(icon(\"decorator\")),\n                suffix()\n              ),\n              $extend(boxLabel(\"$option.label\"), {\n                if: \"$option.label\"\n              })\n            ),\n            boxHelp(\"$option.help\")\n          )\n        )\n      )\n    ),\n    // Help text only goes under the input when it is a single.\n    $if(\"$options == undefined && $help\", help(\"$help\")),\n    messages(message(\"$message.value\"))\n  ),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"input\",\n  /**\n   * The family of inputs this one belongs too. For example \"text\" and \"email\"\n   * are both part of the \"text\" family. This is primary used for styling.\n   */\n  family: \"box\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [\"options\", \"onValue\", \"offValue\", \"optionsLoader\"],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [\n    options,\n    checkboxes,\n    defaultIcon(\"decorator\", \"checkboxDecorator\")\n  ],\n  /**\n   * The key used to memoize the schema.\n   */\n  schemaMemoKey: \"qje02tb3gu8\"\n};\n\n// packages/inputs/src/inputs/file.ts\nvar file = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(\n    wrapper(\n      label(\"$label\"),\n      inner(\n        icon(\"prefix\", \"label\"),\n        prefix(),\n        fileInput(),\n        fileList(\n          fileItem(\n            icon(\"fileItem\"),\n            fileName(\"$file.name\"),\n            $if(\n              \"$value.length === 1\",\n              fileRemove(\n                icon(\"fileRemove\"),\n                '$ui.remove.value + \" \" + $file.name'\n              )\n            )\n          )\n        ),\n        $if(\"$value.length > 1\", fileRemove(\"$ui.removeAll.value\")),\n        noFiles(icon(\"noFiles\"), \"$ui.noFiles.value\"),\n        suffix(),\n        icon(\"suffix\")\n      )\n    ),\n    help(\"$help\"),\n    messages(message(\"$message.value\"))\n  ),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"input\",\n  /**\n   * The family of inputs this one belongs too. For example \"text\" and \"email\"\n   * are both part of the \"text\" family. This is primary used for styling.\n   */\n  family: \"text\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [\n    files,\n    defaultIcon(\"fileItem\", \"fileItem\"),\n    defaultIcon(\"fileRemove\", \"fileRemove\"),\n    defaultIcon(\"noFiles\", \"noFiles\")\n  ],\n  /**\n   * The key used to memoize the schema.\n   */\n  schemaMemoKey: \"9kqc4852fv8\"\n};\n\n// packages/inputs/src/inputs/form.ts\nvar form2 = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: formInput(\n    \"$slots.default\",\n    messages(message(\"$message.value\")),\n    actions(submitInput())\n  ),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"group\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [\n    \"actions\",\n    \"submit\",\n    \"submitLabel\",\n    \"submitAttrs\",\n    \"submitBehavior\",\n    \"incompleteMessage\"\n  ],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [form, disables],\n  /**\n   * The key used to memoize the schema.\n   */\n  schemaMemoKey: \"5bg016redjo\"\n};\n\n// packages/inputs/src/inputs/group.ts\nvar group = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: fragment(\"$slots.default\"),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"group\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [disables, renamesRadios]\n};\n\n// packages/inputs/src/inputs/hidden.ts\nvar hidden = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: textInput(),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"input\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [casts]\n};\n\n// packages/inputs/src/inputs/list.ts\nvar list = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: fragment(\"$slots.default\"),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"list\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [\"sync\", \"dynamic\"],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [disables, renamesRadios]\n};\n\n// packages/inputs/src/inputs/meta.ts\nvar meta = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: fragment(),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"input\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: []\n};\n\n// packages/inputs/src/inputs/radio.ts\nvar radio = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(\n    $if(\n      \"$options == undefined\",\n      /**\n       * Single radio structure.\n       */\n      boxWrapper(\n        boxInner(prefix(), box(), decorator(icon(\"decorator\")), suffix()),\n        $extend(boxLabel(\"$label\"), {\n          if: \"$label\"\n        })\n      ),\n      /**\n       * Multi radio structure.\n       */\n      fieldset(\n        legend(\"$label\"),\n        help(\"$help\"),\n        boxOptions(\n          boxOption(\n            boxWrapper(\n              boxInner(\n                prefix(),\n                $extend(box(), {\n                  bind: \"$option.attrs\",\n                  attrs: {\n                    id: \"$option.attrs.id\",\n                    value: \"$option.value\",\n                    checked: \"$fns.isChecked($option.value)\"\n                  }\n                }),\n                decorator(icon(\"decorator\")),\n                suffix()\n              ),\n              $extend(boxLabel(\"$option.label\"), {\n                if: \"$option.label\"\n              })\n            ),\n            boxHelp(\"$option.help\")\n          )\n        )\n      )\n    ),\n    // Help text only goes under the input when it is a single.\n    $if(\"$options == undefined && $help\", help(\"$help\")),\n    messages(message(\"$message.value\"))\n  ),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"input\",\n  /**\n   * The family of inputs this one belongs too. For example \"text\" and \"email\"\n   * are both part of the \"text\" family. This is primary used for styling.\n   */\n  family: \"box\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [\"options\", \"onValue\", \"offValue\", \"optionsLoader\"],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [options, radios, defaultIcon(\"decorator\", \"radioDecorator\")],\n  /**\n   * The key used to memoize the schema.\n   */\n  schemaMemoKey: \"qje02tb3gu8\"\n};\n\n// packages/inputs/src/inputs/select.ts\nvar select2 = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(\n    wrapper(\n      label(\"$label\"),\n      inner(\n        icon(\"prefix\"),\n        prefix(),\n        selectInput(\n          $if(\n            \"$slots.default\",\n            () => \"$slots.default\",\n            optionSlot(\n              $if(\n                \"$option.group\",\n                optGroup(optionSlot(option(\"$option.label\"))),\n                option(\"$option.label\")\n              )\n            )\n          )\n        ),\n        $if(\"$attrs.multiple !== undefined\", () => \"\", icon(\"select\")),\n        suffix(),\n        icon(\"suffix\")\n      )\n    ),\n    help(\"$help\"),\n    messages(message(\"$message.value\"))\n  ),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"input\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [\"options\", \"placeholder\", \"optionsLoader\"],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [options, select, defaultIcon(\"select\", \"select\")],\n  /**\n   * The key used to memoize the schema.\n   */\n  schemaMemoKey: \"cb119h43krg\"\n};\n\n// packages/inputs/src/inputs/textarea.ts\nvar textarea = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(\n    wrapper(\n      label(\"$label\"),\n      inner(\n        icon(\"prefix\", \"label\"),\n        prefix(),\n        textareaInput(),\n        suffix(),\n        icon(\"suffix\")\n      )\n    ),\n    help(\"$help\"),\n    messages(message(\"$message.value\"))\n  ),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"input\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [initialValue],\n  /**\n   * The key used to memoize the schema.\n   */\n  schemaMemoKey: \"b1n0td79m9g\"\n};\n\n// packages/inputs/src/inputs/text.ts\nvar text = {\n  /**\n   * The actual schema of the input, or a function that returns the schema.\n   */\n  schema: outer(\n    wrapper(\n      label(\"$label\"),\n      inner(\n        icon(\"prefix\", \"label\"),\n        prefix(),\n        textInput(),\n        suffix(),\n        icon(\"suffix\")\n      )\n    ),\n    help(\"$help\"),\n    messages(message(\"$message.value\"))\n  ),\n  /**\n   * The type of node, can be a list, group, or input.\n   */\n  type: \"input\",\n  /**\n   * The family of inputs this one belongs too. For example \"text\" and \"email\"\n   * are both part of the \"text\" family. This is primary used for styling.\n   */\n  family: \"text\",\n  /**\n   * An array of extra props to accept for this input.\n   */\n  props: [],\n  /**\n   * Additional features that should be added to your input\n   */\n  features: [casts],\n  /**\n   * The key used to memoize the schema.\n   */\n  schemaMemoKey: \"c3cc4kflsg\"\n};\n\n// packages/inputs/src/index.ts\nvar inputs = {\n  button,\n  submit: button,\n  checkbox,\n  file,\n  form: form2,\n  group,\n  hidden,\n  list,\n  meta,\n  radio,\n  select: select2,\n  textarea,\n  text,\n  color: text,\n  date: text,\n  datetimeLocal: text,\n  email: text,\n  month: text,\n  number: text,\n  password: text,\n  search: text,\n  tel: text,\n  time: text,\n  url: text,\n  week: text,\n  range: text\n};\n\nexport { $attrs, $extend, $for, $if, $root, actions, box, boxHelp, boxInner, boxLabel, boxOption, boxOptions, boxWrapper, button, buttonInput, buttonLabel, casts, checkbox, checkboxes, text as color, createLibraryPlugin, createSection, text as date, text as datetimeLocal, decorator, defaultIcon, disables as disablesChildren, eachSection, text as email, extendSchema, fieldset, file, fileInput, fileItem, fileList, fileName, fileRemove, files, findSection, form2 as form, formInput, form as forms, fragment, group, help, hidden, icon, ignore as ignores, initialValue, inner, inputs, isGroupOption, isSchemaObject, isSlotCondition, label, legend, list, localize, message, messages, meta, text as month, noFiles, normalizeBoxes, normalizeOptions, text as number, optGroup, option, optionSlot, options, outer, text as password, prefix, radio, radios, text as range, renamesRadios, runtimeProps, text as search, select2 as select, selectInput, select as selects, button as submit, submitInput, suffix, text as tel, text, textInput, textarea, textareaInput, text as time, text as url, useSchema, text as week, wrapper };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.mjs.map",
      "start": 1709718916285,
      "end": 1709718916362,
      "sourcemaps": null
    },
    {
      "name": "unplugin-formkit",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709718916362,
      "end": 1709718916362,
      "order": "normal"
    }
  ]
}
