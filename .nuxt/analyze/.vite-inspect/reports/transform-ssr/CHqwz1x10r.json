{
  "resolvedId": "/Users/sebastianwessel/projekte/voyage/node_modules/element-plus/es/components/watermark/src/useClips.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "const FontGap = 3;\nfunction prepareCanvas(width, height, ratio = 1) {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const realWidth = width * ratio;\n  const realHeight = height * ratio;\n  canvas.setAttribute(\"width\", `${realWidth}px`);\n  canvas.setAttribute(\"height\", `${realHeight}px`);\n  ctx.save();\n  return [ctx, canvas, realWidth, realHeight];\n}\nfunction useClips() {\n  function getClips(content, rotate, ratio, width, height, font, gapX, gapY) {\n    const [ctx, canvas, contentWidth, contentHeight] = prepareCanvas(width, height, ratio);\n    if (content instanceof HTMLImageElement) {\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight);\n    } else {\n      const {\n        color,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        textAlign,\n        textBaseline\n      } = font;\n      const mergedFontSize = Number(fontSize) * ratio;\n      ctx.font = `${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`;\n      ctx.fillStyle = color;\n      ctx.textAlign = textAlign;\n      ctx.textBaseline = textBaseline;\n      const contents = Array.isArray(content) ? content : [content];\n      contents == null ? void 0 : contents.forEach((item, index) => {\n        ctx.fillText(item != null ? item : \"\", contentWidth / 2, index * (mergedFontSize + FontGap * ratio));\n      });\n    }\n    const angle = Math.PI / 180 * Number(rotate);\n    const maxSize = Math.max(width, height);\n    const [rCtx, rCanvas, realMaxSize] = prepareCanvas(maxSize, maxSize, ratio);\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2);\n    rCtx.rotate(angle);\n    if (contentWidth > 0 && contentHeight > 0) {\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);\n    }\n    function getRotatePos(x, y) {\n      const targetX = x * Math.cos(angle) - y * Math.sin(angle);\n      const targetY = x * Math.sin(angle) + y * Math.cos(angle);\n      return [targetX, targetY];\n    }\n    let left = 0;\n    let right = 0;\n    let top = 0;\n    let bottom = 0;\n    const halfWidth = contentWidth / 2;\n    const halfHeight = contentHeight / 2;\n    const points = [\n      [0 - halfWidth, 0 - halfHeight],\n      [0 + halfWidth, 0 - halfHeight],\n      [0 + halfWidth, 0 + halfHeight],\n      [0 - halfWidth, 0 + halfHeight]\n    ];\n    points.forEach(([x, y]) => {\n      const [targetX, targetY] = getRotatePos(x, y);\n      left = Math.min(left, targetX);\n      right = Math.max(right, targetX);\n      top = Math.min(top, targetY);\n      bottom = Math.max(bottom, targetY);\n    });\n    const cutLeft = left + realMaxSize / 2;\n    const cutTop = top + realMaxSize / 2;\n    const cutWidth = right - left;\n    const cutHeight = bottom - top;\n    const realGapX = gapX * ratio;\n    const realGapY = gapY * ratio;\n    const filledWidth = (cutWidth + realGapX) * 2;\n    const filledHeight = cutHeight + realGapY;\n    const [fCtx, fCanvas] = prepareCanvas(filledWidth, filledHeight);\n    function drawImg(targetX = 0, targetY = 0) {\n      fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);\n    }\n    drawImg();\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];\n  }\n  return getClips;\n}\n\nexport { FontGap, useClips as default };\n//# sourceMappingURL=useClips.mjs.map\n",
      "start": 1709718919147,
      "end": 1709718919160,
      "sourcemaps": null
    },
    {
      "name": "unplugin-formkit",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718919160,
      "end": 1709718919160,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709718919161,
      "end": 1709718919161,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709718919161,
      "end": 1709718919161,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709718919161,
      "end": 1709718919161,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718919161,
      "end": 1709718919161,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709718919161,
      "end": 1709718919161,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "const FontGap = 3;\nfunction prepareCanvas(width, height, ratio = 1) {\n  const canvas = (void 0).createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const realWidth = width * ratio;\n  const realHeight = height * ratio;\n  canvas.setAttribute(\"width\", `${realWidth}px`);\n  canvas.setAttribute(\"height\", `${realHeight}px`);\n  ctx.save();\n  return [ctx, canvas, realWidth, realHeight];\n}\nfunction useClips() {\n  function getClips(content, rotate, ratio, width, height, font, gapX, gapY) {\n    const [ctx, canvas, contentWidth, contentHeight] = prepareCanvas(width, height, ratio);\n    if (content instanceof HTMLImageElement) {\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight);\n    } else {\n      const {\n        color,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        textAlign,\n        textBaseline\n      } = font;\n      const mergedFontSize = Number(fontSize) * ratio;\n      ctx.font = `${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`;\n      ctx.fillStyle = color;\n      ctx.textAlign = textAlign;\n      ctx.textBaseline = textBaseline;\n      const contents = Array.isArray(content) ? content : [content];\n      contents == null ? void 0 : contents.forEach((item, index) => {\n        ctx.fillText(item != null ? item : \"\", contentWidth / 2, index * (mergedFontSize + FontGap * ratio));\n      });\n    }\n    const angle = Math.PI / 180 * Number(rotate);\n    const maxSize = Math.max(width, height);\n    const [rCtx, rCanvas, realMaxSize] = prepareCanvas(maxSize, maxSize, ratio);\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2);\n    rCtx.rotate(angle);\n    if (contentWidth > 0 && contentHeight > 0) {\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);\n    }\n    function getRotatePos(x, y) {\n      const targetX = x * Math.cos(angle) - y * Math.sin(angle);\n      const targetY = x * Math.sin(angle) + y * Math.cos(angle);\n      return [targetX, targetY];\n    }\n    let left = 0;\n    let right = 0;\n    let top = 0;\n    let bottom = 0;\n    const halfWidth = contentWidth / 2;\n    const halfHeight = contentHeight / 2;\n    const points = [\n      [0 - halfWidth, 0 - halfHeight],\n      [0 + halfWidth, 0 - halfHeight],\n      [0 + halfWidth, 0 + halfHeight],\n      [0 - halfWidth, 0 + halfHeight]\n    ];\n    points.forEach(([x, y]) => {\n      const [targetX, targetY] = getRotatePos(x, y);\n      left = Math.min(left, targetX);\n      right = Math.max(right, targetX);\n      top = Math.min(top, targetY);\n      bottom = Math.max(bottom, targetY);\n    });\n    const cutLeft = left + realMaxSize / 2;\n    const cutTop = top + realMaxSize / 2;\n    const cutWidth = right - left;\n    const cutHeight = bottom - top;\n    const realGapX = gapX * ratio;\n    const realGapY = gapY * ratio;\n    const filledWidth = (cutWidth + realGapX) * 2;\n    const filledHeight = cutHeight + realGapY;\n    const [fCtx, fCanvas] = prepareCanvas(filledWidth, filledHeight);\n    function drawImg(targetX = 0, targetY = 0) {\n      fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);\n    }\n    drawImg();\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];\n  }\n  return getClips;\n}\nexport { FontGap, useClips as default };\n",
      "start": 1709718919161,
      "end": 1709718919414,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/sebastianwessel/projekte/voyage/node_modules/element-plus/es/components/watermark/src/useClips.mjs\"],\n  \"sourcesContent\": [\"const FontGap = 3;\\nfunction prepareCanvas(width, height, ratio = 1) {\\n  const canvas = document.createElement(\\\"canvas\\\");\\n  const ctx = canvas.getContext(\\\"2d\\\");\\n  const realWidth = width * ratio;\\n  const realHeight = height * ratio;\\n  canvas.setAttribute(\\\"width\\\", `${realWidth}px`);\\n  canvas.setAttribute(\\\"height\\\", `${realHeight}px`);\\n  ctx.save();\\n  return [ctx, canvas, realWidth, realHeight];\\n}\\nfunction useClips() {\\n  function getClips(content, rotate, ratio, width, height, font, gapX, gapY) {\\n    const [ctx, canvas, contentWidth, contentHeight] = prepareCanvas(width, height, ratio);\\n    if (content instanceof HTMLImageElement) {\\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight);\\n    } else {\\n      const {\\n        color,\\n        fontSize,\\n        fontStyle,\\n        fontWeight,\\n        fontFamily,\\n        textAlign,\\n        textBaseline\\n      } = font;\\n      const mergedFontSize = Number(fontSize) * ratio;\\n      ctx.font = `${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`;\\n      ctx.fillStyle = color;\\n      ctx.textAlign = textAlign;\\n      ctx.textBaseline = textBaseline;\\n      const contents = Array.isArray(content) ? content : [content];\\n      contents == null ? void 0 : contents.forEach((item, index) => {\\n        ctx.fillText(item != null ? item : \\\"\\\", contentWidth / 2, index * (mergedFontSize + FontGap * ratio));\\n      });\\n    }\\n    const angle = Math.PI / 180 * Number(rotate);\\n    const maxSize = Math.max(width, height);\\n    const [rCtx, rCanvas, realMaxSize] = prepareCanvas(maxSize, maxSize, ratio);\\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2);\\n    rCtx.rotate(angle);\\n    if (contentWidth > 0 && contentHeight > 0) {\\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);\\n    }\\n    function getRotatePos(x, y) {\\n      const targetX = x * Math.cos(angle) - y * Math.sin(angle);\\n      const targetY = x * Math.sin(angle) + y * Math.cos(angle);\\n      return [targetX, targetY];\\n    }\\n    let left = 0;\\n    let right = 0;\\n    let top = 0;\\n    let bottom = 0;\\n    const halfWidth = contentWidth / 2;\\n    const halfHeight = contentHeight / 2;\\n    const points = [\\n      [0 - halfWidth, 0 - halfHeight],\\n      [0 + halfWidth, 0 - halfHeight],\\n      [0 + halfWidth, 0 + halfHeight],\\n      [0 - halfWidth, 0 + halfHeight]\\n    ];\\n    points.forEach(([x, y]) => {\\n      const [targetX, targetY] = getRotatePos(x, y);\\n      left = Math.min(left, targetX);\\n      right = Math.max(right, targetX);\\n      top = Math.min(top, targetY);\\n      bottom = Math.max(bottom, targetY);\\n    });\\n    const cutLeft = left + realMaxSize / 2;\\n    const cutTop = top + realMaxSize / 2;\\n    const cutWidth = right - left;\\n    const cutHeight = bottom - top;\\n    const realGapX = gapX * ratio;\\n    const realGapY = gapY * ratio;\\n    const filledWidth = (cutWidth + realGapX) * 2;\\n    const filledHeight = cutHeight + realGapY;\\n    const [fCtx, fCanvas] = prepareCanvas(filledWidth, filledHeight);\\n    function drawImg(targetX = 0, targetY = 0) {\\n      fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);\\n    }\\n    drawImg();\\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);\\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);\\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];\\n  }\\n  return getClips;\\n}\\n\\nexport { FontGap, useClips as default };\\n//# sourceMappingURL=useClips.mjs.map\\n\"],\n  \"mappings\": \"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\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1709718919414,
      "end": 1709718919414,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709718919414,
      "end": 1709718919414,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709718919414,
      "end": 1709718919414,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709718919414,
      "end": 1709718919414,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709718919414,
      "end": 1709718919414,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709718919415,
      "end": 1709718919415,
      "order": "normal"
    }
  ]
}
