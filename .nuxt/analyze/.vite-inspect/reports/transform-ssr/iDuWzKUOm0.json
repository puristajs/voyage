{
  "resolvedId": "/Users/sebastianwessel/projekte/voyage/node_modules/element-plus/es/components/date-picker/src/composables/use-basic-date-table.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ref, computed, unref, watch, nextTick } from 'vue';\nimport dayjs from 'dayjs';\nimport { flatten } from 'lodash-unified';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { buildPickerTable } from '../utils.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { castArray } from '../../../../utils/arrays.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nconst isNormalDay = (type = \"\") => {\n  return [\"normal\", \"today\"].includes(type);\n};\nconst useBasicDateTable = (props, emit) => {\n  const { lang } = useLocale();\n  const tbodyRef = ref();\n  const currentCellRef = ref();\n  const lastRow = ref();\n  const lastColumn = ref();\n  const tableRows = ref([[], [], [], [], [], []]);\n  let focusWithClick = false;\n  const firstDayOfWeek = props.date.$locale().weekStart || 7;\n  const WEEKS_CONSTANT = props.date.locale(\"en\").localeData().weekdaysShort().map((_) => _.toLowerCase());\n  const offsetDay = computed(() => {\n    return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;\n  });\n  const startDate = computed(() => {\n    const startDayOfMonth = props.date.startOf(\"month\");\n    return startDayOfMonth.subtract(startDayOfMonth.day() || 7, \"day\");\n  });\n  const WEEKS = computed(() => {\n    return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);\n  });\n  const hasCurrent = computed(() => {\n    return flatten(unref(rows)).some((row) => {\n      return row.isCurrent;\n    });\n  });\n  const days = computed(() => {\n    const startOfMonth = props.date.startOf(\"month\");\n    const startOfMonthDay = startOfMonth.day() || 7;\n    const dateCountOfMonth = startOfMonth.daysInMonth();\n    const dateCountOfLastMonth = startOfMonth.subtract(1, \"month\").daysInMonth();\n    return {\n      startOfMonthDay,\n      dateCountOfMonth,\n      dateCountOfLastMonth\n    };\n  });\n  const selectedDate = computed(() => {\n    return props.selectionMode === \"dates\" ? castArray(props.parsedValue) : [];\n  });\n  const setDateText = (cell, { count, rowIndex, columnIndex }) => {\n    const { startOfMonthDay, dateCountOfMonth, dateCountOfLastMonth } = unref(days);\n    const offset = unref(offsetDay);\n    if (rowIndex >= 0 && rowIndex <= 1) {\n      const numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;\n      if (columnIndex + rowIndex * 7 >= numberOfDaysFromPreviousMonth) {\n        cell.text = count;\n        return true;\n      } else {\n        cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - columnIndex % 7) + 1 + rowIndex * 7;\n        cell.type = \"prev-month\";\n      }\n    } else {\n      if (count <= dateCountOfMonth) {\n        cell.text = count;\n      } else {\n        cell.text = count - dateCountOfMonth;\n        cell.type = \"next-month\";\n      }\n      return true;\n    }\n    return false;\n  };\n  const setCellMetadata = (cell, { columnIndex, rowIndex }, count) => {\n    const { disabledDate, cellClassName } = props;\n    const _selectedDate = unref(selectedDate);\n    const shouldIncrement = setDateText(cell, { count, rowIndex, columnIndex });\n    const cellDate = cell.dayjs.toDate();\n    cell.selected = _selectedDate.find((d) => d.isSame(cell.dayjs, \"day\"));\n    cell.isSelected = !!cell.selected;\n    cell.isCurrent = isCurrent(cell);\n    cell.disabled = disabledDate == null ? void 0 : disabledDate(cellDate);\n    cell.customClass = cellClassName == null ? void 0 : cellClassName(cellDate);\n    return shouldIncrement;\n  };\n  const setRowMetadata = (row) => {\n    if (props.selectionMode === \"week\") {\n      const [start, end] = props.showWeekNumber ? [1, 7] : [0, 6];\n      const isActive = isWeekActive(row[start + 1]);\n      row[start].inRange = isActive;\n      row[start].start = isActive;\n      row[end].inRange = isActive;\n      row[end].end = isActive;\n    }\n  };\n  const rows = computed(() => {\n    const { minDate, maxDate, rangeState, showWeekNumber } = props;\n    const offset = unref(offsetDay);\n    const rows_ = unref(tableRows);\n    const dateUnit = \"day\";\n    let count = 1;\n    if (showWeekNumber) {\n      for (let rowIndex = 0; rowIndex < 6; rowIndex++) {\n        if (!rows_[rowIndex][0]) {\n          rows_[rowIndex][0] = {\n            type: \"week\",\n            text: unref(startDate).add(rowIndex * 7 + 1, dateUnit).week()\n          };\n        }\n      }\n    }\n    buildPickerTable({ row: 6, column: 7 }, rows_, {\n      startDate: minDate,\n      columnIndexOffset: showWeekNumber ? 1 : 0,\n      nextEndDate: rangeState.endDate || maxDate || rangeState.selecting && minDate || null,\n      now: dayjs().locale(unref(lang)).startOf(dateUnit),\n      unit: dateUnit,\n      relativeDateGetter: (idx) => unref(startDate).add(idx - offset, dateUnit),\n      setCellMetadata: (...args) => {\n        if (setCellMetadata(...args, count)) {\n          count += 1;\n        }\n      },\n      setRowMetadata\n    });\n    return rows_;\n  });\n  watch(() => props.date, async () => {\n    var _a;\n    if ((_a = unref(tbodyRef)) == null ? void 0 : _a.contains(document.activeElement)) {\n      await nextTick();\n      await focus();\n    }\n  });\n  const focus = async () => {\n    var _a;\n    return (_a = unref(currentCellRef)) == null ? void 0 : _a.focus();\n  };\n  const isCurrent = (cell) => {\n    return props.selectionMode === \"date\" && isNormalDay(cell.type) && cellMatchesDate(cell, props.parsedValue);\n  };\n  const cellMatchesDate = (cell, date) => {\n    if (!date)\n      return false;\n    return dayjs(date).locale(unref(lang)).isSame(props.date.date(Number(cell.text)), \"day\");\n  };\n  const getDateOfCell = (row, column) => {\n    const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - unref(offsetDay);\n    return unref(startDate).add(offsetFromStart, \"day\");\n  };\n  const handleMouseMove = (event) => {\n    var _a;\n    if (!props.rangeState.selecting)\n      return;\n    let target = event.target;\n    if (target.tagName === \"SPAN\") {\n      target = (_a = target.parentNode) == null ? void 0 : _a.parentNode;\n    }\n    if (target.tagName === \"DIV\") {\n      target = target.parentNode;\n    }\n    if (target.tagName !== \"TD\")\n      return;\n    const row = target.parentNode.rowIndex - 1;\n    const column = target.cellIndex;\n    if (unref(rows)[row][column].disabled)\n      return;\n    if (row !== unref(lastRow) || column !== unref(lastColumn)) {\n      lastRow.value = row;\n      lastColumn.value = column;\n      emit(\"changerange\", {\n        selecting: true,\n        endDate: getDateOfCell(row, column)\n      });\n    }\n  };\n  const isSelectedCell = (cell) => {\n    return !unref(hasCurrent) && (cell == null ? void 0 : cell.text) === 1 && cell.type === \"normal\" || cell.isCurrent;\n  };\n  const handleFocus = (event) => {\n    if (focusWithClick || unref(hasCurrent) || props.selectionMode !== \"date\")\n      return;\n    handlePickDate(event, true);\n  };\n  const handleMouseDown = (event) => {\n    const target = event.target.closest(\"td\");\n    if (!target)\n      return;\n    focusWithClick = true;\n  };\n  const handleMouseUp = (event) => {\n    const target = event.target.closest(\"td\");\n    if (!target)\n      return;\n    focusWithClick = false;\n  };\n  const handleRangePick = (newDate) => {\n    if (!props.rangeState.selecting || !props.minDate) {\n      emit(\"pick\", { minDate: newDate, maxDate: null });\n      emit(\"select\", true);\n    } else {\n      if (newDate >= props.minDate) {\n        emit(\"pick\", { minDate: props.minDate, maxDate: newDate });\n      } else {\n        emit(\"pick\", { minDate: newDate, maxDate: props.minDate });\n      }\n      emit(\"select\", false);\n    }\n  };\n  const handleWeekPick = (newDate) => {\n    const weekNumber = newDate.week();\n    const value = `${newDate.year()}w${weekNumber}`;\n    emit(\"pick\", {\n      year: newDate.year(),\n      week: weekNumber,\n      value,\n      date: newDate.startOf(\"week\")\n    });\n  };\n  const handleDatesPick = (newDate, selected) => {\n    const newValue = selected ? castArray(props.parsedValue).filter((d) => (d == null ? void 0 : d.valueOf()) !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);\n    emit(\"pick\", newValue);\n  };\n  const handlePickDate = (event, isKeyboardMovement = false) => {\n    const target = event.target.closest(\"td\");\n    if (!target)\n      return;\n    const row = target.parentNode.rowIndex - 1;\n    const column = target.cellIndex;\n    const cell = unref(rows)[row][column];\n    if (cell.disabled || cell.type === \"week\")\n      return;\n    const newDate = getDateOfCell(row, column);\n    switch (props.selectionMode) {\n      case \"range\": {\n        handleRangePick(newDate);\n        break;\n      }\n      case \"date\": {\n        emit(\"pick\", newDate, isKeyboardMovement);\n        break;\n      }\n      case \"week\": {\n        handleWeekPick(newDate);\n        break;\n      }\n      case \"dates\": {\n        handleDatesPick(newDate, !!cell.selected);\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  };\n  const isWeekActive = (cell) => {\n    if (props.selectionMode !== \"week\")\n      return false;\n    let newDate = props.date.startOf(\"day\");\n    if (cell.type === \"prev-month\") {\n      newDate = newDate.subtract(1, \"month\");\n    }\n    if (cell.type === \"next-month\") {\n      newDate = newDate.add(1, \"month\");\n    }\n    newDate = newDate.date(Number.parseInt(cell.text, 10));\n    if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n      const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;\n      const weekDate = props.parsedValue.subtract(dayOffset, \"day\");\n      return weekDate.isSame(newDate, \"day\");\n    }\n    return false;\n  };\n  return {\n    WEEKS,\n    rows,\n    tbodyRef,\n    currentCellRef,\n    focus,\n    isCurrent,\n    isWeekActive,\n    isSelectedCell,\n    handlePickDate,\n    handleMouseUp,\n    handleMouseDown,\n    handleMouseMove,\n    handleFocus\n  };\n};\nconst useBasicDateTableDOM = (props, {\n  isCurrent,\n  isWeekActive\n}) => {\n  const ns = useNamespace(\"date-table\");\n  const { t } = useLocale();\n  const tableKls = computed(() => [\n    ns.b(),\n    { \"is-week-mode\": props.selectionMode === \"week\" }\n  ]);\n  const tableLabel = computed(() => t(\"el.datepicker.dateTablePrompt\"));\n  const weekLabel = computed(() => t(\"el.datepicker.week\"));\n  const getCellClasses = (cell) => {\n    const classes = [];\n    if (isNormalDay(cell.type) && !cell.disabled) {\n      classes.push(\"available\");\n      if (cell.type === \"today\") {\n        classes.push(\"today\");\n      }\n    } else {\n      classes.push(cell.type);\n    }\n    if (isCurrent(cell)) {\n      classes.push(\"current\");\n    }\n    if (cell.inRange && (isNormalDay(cell.type) || props.selectionMode === \"week\")) {\n      classes.push(\"in-range\");\n      if (cell.start) {\n        classes.push(\"start-date\");\n      }\n      if (cell.end) {\n        classes.push(\"end-date\");\n      }\n    }\n    if (cell.disabled) {\n      classes.push(\"disabled\");\n    }\n    if (cell.selected) {\n      classes.push(\"selected\");\n    }\n    if (cell.customClass) {\n      classes.push(cell.customClass);\n    }\n    return classes.join(\" \");\n  };\n  const getRowKls = (cell) => [\n    ns.e(\"row\"),\n    { current: isWeekActive(cell) }\n  ];\n  return {\n    tableKls,\n    tableLabel,\n    weekLabel,\n    getCellClasses,\n    getRowKls,\n    t\n  };\n};\n\nexport { useBasicDateTable, useBasicDateTableDOM };\n//# sourceMappingURL=use-basic-date-table.mjs.map\n",
      "start": 1709718919063,
      "end": 1709718919071,
      "sourcemaps": null
    },
    {
      "name": "unplugin-formkit",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709718919071,
      "end": 1709718919071,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709718919071,
      "end": 1709718919072,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { ref, computed, unref, watch, nextTick } from \"vue\";\nimport dayjs from \"dayjs\";\nimport { flatten } from \"lodash-unified\";\nimport \"../../../../hooks/index.mjs\";\nimport \"../../../../utils/index.mjs\";\nimport { buildPickerTable } from \"../utils.mjs\";\nimport { useLocale } from \"../../../../hooks/use-locale/index.mjs\";\nimport { castArray } from \"../../../../utils/arrays.mjs\";\nimport { useNamespace } from \"../../../../hooks/use-namespace/index.mjs\";\nconst isNormalDay = (type = \"\") => {\n  return [\"normal\", \"today\"].includes(type);\n};\nconst useBasicDateTable = (props, emit) => {\n  const { lang } = useLocale();\n  const tbodyRef = ref();\n  const currentCellRef = ref();\n  const lastRow = ref();\n  const lastColumn = ref();\n  const tableRows = ref([[], [], [], [], [], []]);\n  let focusWithClick = false;\n  const firstDayOfWeek = props.date.$locale().weekStart || 7;\n  const WEEKS_CONSTANT = props.date.locale(\"en\").localeData().weekdaysShort().map((_) => _.toLowerCase());\n  const offsetDay = computed(() => {\n    return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;\n  });\n  const startDate = computed(() => {\n    const startDayOfMonth = props.date.startOf(\"month\");\n    return startDayOfMonth.subtract(startDayOfMonth.day() || 7, \"day\");\n  });\n  const WEEKS = computed(() => {\n    return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);\n  });\n  const hasCurrent = computed(() => {\n    return flatten(unref(rows)).some((row) => {\n      return row.isCurrent;\n    });\n  });\n  const days = computed(() => {\n    const startOfMonth = props.date.startOf(\"month\");\n    const startOfMonthDay = startOfMonth.day() || 7;\n    const dateCountOfMonth = startOfMonth.daysInMonth();\n    const dateCountOfLastMonth = startOfMonth.subtract(1, \"month\").daysInMonth();\n    return {\n      startOfMonthDay,\n      dateCountOfMonth,\n      dateCountOfLastMonth\n    };\n  });\n  const selectedDate = computed(() => {\n    return props.selectionMode === \"dates\" ? castArray(props.parsedValue) : [];\n  });\n  const setDateText = (cell, { count, rowIndex, columnIndex }) => {\n    const { startOfMonthDay, dateCountOfMonth, dateCountOfLastMonth } = unref(days);\n    const offset = unref(offsetDay);\n    if (rowIndex >= 0 && rowIndex <= 1) {\n      const numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;\n      if (columnIndex + rowIndex * 7 >= numberOfDaysFromPreviousMonth) {\n        cell.text = count;\n        return true;\n      } else {\n        cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - columnIndex % 7) + 1 + rowIndex * 7;\n        cell.type = \"prev-month\";\n      }\n    } else {\n      if (count <= dateCountOfMonth) {\n        cell.text = count;\n      } else {\n        cell.text = count - dateCountOfMonth;\n        cell.type = \"next-month\";\n      }\n      return true;\n    }\n    return false;\n  };\n  const setCellMetadata = (cell, { columnIndex, rowIndex }, count) => {\n    const { disabledDate, cellClassName } = props;\n    const _selectedDate = unref(selectedDate);\n    const shouldIncrement = setDateText(cell, { count, rowIndex, columnIndex });\n    const cellDate = cell.dayjs.toDate();\n    cell.selected = _selectedDate.find((d) => d.isSame(cell.dayjs, \"day\"));\n    cell.isSelected = !!cell.selected;\n    cell.isCurrent = isCurrent(cell);\n    cell.disabled = disabledDate == null ? void 0 : disabledDate(cellDate);\n    cell.customClass = cellClassName == null ? void 0 : cellClassName(cellDate);\n    return shouldIncrement;\n  };\n  const setRowMetadata = (row) => {\n    if (props.selectionMode === \"week\") {\n      const [start, end] = props.showWeekNumber ? [1, 7] : [0, 6];\n      const isActive = isWeekActive(row[start + 1]);\n      row[start].inRange = isActive;\n      row[start].start = isActive;\n      row[end].inRange = isActive;\n      row[end].end = isActive;\n    }\n  };\n  const rows = computed(() => {\n    const { minDate, maxDate, rangeState, showWeekNumber } = props;\n    const offset = unref(offsetDay);\n    const rows_ = unref(tableRows);\n    const dateUnit = \"day\";\n    let count = 1;\n    if (showWeekNumber) {\n      for (let rowIndex = 0; rowIndex < 6; rowIndex++) {\n        if (!rows_[rowIndex][0]) {\n          rows_[rowIndex][0] = {\n            type: \"week\",\n            text: unref(startDate).add(rowIndex * 7 + 1, dateUnit).week()\n          };\n        }\n      }\n    }\n    buildPickerTable({ row: 6, column: 7 }, rows_, {\n      startDate: minDate,\n      columnIndexOffset: showWeekNumber ? 1 : 0,\n      nextEndDate: rangeState.endDate || maxDate || rangeState.selecting && minDate || null,\n      now: dayjs().locale(unref(lang)).startOf(dateUnit),\n      unit: dateUnit,\n      relativeDateGetter: (idx) => unref(startDate).add(idx - offset, dateUnit),\n      setCellMetadata: (...args) => {\n        if (setCellMetadata(...args, count)) {\n          count += 1;\n        }\n      },\n      setRowMetadata\n    });\n    return rows_;\n  });\n  watch(() => props.date, async () => {\n    var _a;\n    if ((_a = unref(tbodyRef)) == null ? void 0 : _a.contains((void 0).activeElement)) {\n      await nextTick();\n      await focus();\n    }\n  });\n  const focus = async () => {\n    var _a;\n    return (_a = unref(currentCellRef)) == null ? void 0 : _a.focus();\n  };\n  const isCurrent = (cell) => {\n    return props.selectionMode === \"date\" && isNormalDay(cell.type) && cellMatchesDate(cell, props.parsedValue);\n  };\n  const cellMatchesDate = (cell, date) => {\n    if (!date)\n      return false;\n    return dayjs(date).locale(unref(lang)).isSame(props.date.date(Number(cell.text)), \"day\");\n  };\n  const getDateOfCell = (row, column) => {\n    const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - unref(offsetDay);\n    return unref(startDate).add(offsetFromStart, \"day\");\n  };\n  const handleMouseMove = (event) => {\n    var _a;\n    if (!props.rangeState.selecting)\n      return;\n    let target = event.target;\n    if (target.tagName === \"SPAN\") {\n      target = (_a = target.parentNode) == null ? void 0 : _a.parentNode;\n    }\n    if (target.tagName === \"DIV\") {\n      target = target.parentNode;\n    }\n    if (target.tagName !== \"TD\")\n      return;\n    const row = target.parentNode.rowIndex - 1;\n    const column = target.cellIndex;\n    if (unref(rows)[row][column].disabled)\n      return;\n    if (row !== unref(lastRow) || column !== unref(lastColumn)) {\n      lastRow.value = row;\n      lastColumn.value = column;\n      emit(\"changerange\", {\n        selecting: true,\n        endDate: getDateOfCell(row, column)\n      });\n    }\n  };\n  const isSelectedCell = (cell) => {\n    return !unref(hasCurrent) && (cell == null ? void 0 : cell.text) === 1 && cell.type === \"normal\" || cell.isCurrent;\n  };\n  const handleFocus = (event) => {\n    if (focusWithClick || unref(hasCurrent) || props.selectionMode !== \"date\")\n      return;\n    handlePickDate(event, true);\n  };\n  const handleMouseDown = (event) => {\n    const target = event.target.closest(\"td\");\n    if (!target)\n      return;\n    focusWithClick = true;\n  };\n  const handleMouseUp = (event) => {\n    const target = event.target.closest(\"td\");\n    if (!target)\n      return;\n    focusWithClick = false;\n  };\n  const handleRangePick = (newDate) => {\n    if (!props.rangeState.selecting || !props.minDate) {\n      emit(\"pick\", { minDate: newDate, maxDate: null });\n      emit(\"select\", true);\n    } else {\n      if (newDate >= props.minDate) {\n        emit(\"pick\", { minDate: props.minDate, maxDate: newDate });\n      } else {\n        emit(\"pick\", { minDate: newDate, maxDate: props.minDate });\n      }\n      emit(\"select\", false);\n    }\n  };\n  const handleWeekPick = (newDate) => {\n    const weekNumber = newDate.week();\n    const value = `${newDate.year()}w${weekNumber}`;\n    emit(\"pick\", {\n      year: newDate.year(),\n      week: weekNumber,\n      value,\n      date: newDate.startOf(\"week\")\n    });\n  };\n  const handleDatesPick = (newDate, selected) => {\n    const newValue = selected ? castArray(props.parsedValue).filter((d) => (d == null ? void 0 : d.valueOf()) !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);\n    emit(\"pick\", newValue);\n  };\n  const handlePickDate = (event, isKeyboardMovement = false) => {\n    const target = event.target.closest(\"td\");\n    if (!target)\n      return;\n    const row = target.parentNode.rowIndex - 1;\n    const column = target.cellIndex;\n    const cell = unref(rows)[row][column];\n    if (cell.disabled || cell.type === \"week\")\n      return;\n    const newDate = getDateOfCell(row, column);\n    switch (props.selectionMode) {\n      case \"range\": {\n        handleRangePick(newDate);\n        break;\n      }\n      case \"date\": {\n        emit(\"pick\", newDate, isKeyboardMovement);\n        break;\n      }\n      case \"week\": {\n        handleWeekPick(newDate);\n        break;\n      }\n      case \"dates\": {\n        handleDatesPick(newDate, !!cell.selected);\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  };\n  const isWeekActive = (cell) => {\n    if (props.selectionMode !== \"week\")\n      return false;\n    let newDate = props.date.startOf(\"day\");\n    if (cell.type === \"prev-month\") {\n      newDate = newDate.subtract(1, \"month\");\n    }\n    if (cell.type === \"next-month\") {\n      newDate = newDate.add(1, \"month\");\n    }\n    newDate = newDate.date(Number.parseInt(cell.text, 10));\n    if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n      const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;\n      const weekDate = props.parsedValue.subtract(dayOffset, \"day\");\n      return weekDate.isSame(newDate, \"day\");\n    }\n    return false;\n  };\n  return {\n    WEEKS,\n    rows,\n    tbodyRef,\n    currentCellRef,\n    focus,\n    isCurrent,\n    isWeekActive,\n    isSelectedCell,\n    handlePickDate,\n    handleMouseUp,\n    handleMouseDown,\n    handleMouseMove,\n    handleFocus\n  };\n};\nconst useBasicDateTableDOM = (props, {\n  isCurrent,\n  isWeekActive\n}) => {\n  const ns = useNamespace(\"date-table\");\n  const { t } = useLocale();\n  const tableKls = computed(() => [\n    ns.b(),\n    { \"is-week-mode\": props.selectionMode === \"week\" }\n  ]);\n  const tableLabel = computed(() => t(\"el.datepicker.dateTablePrompt\"));\n  const weekLabel = computed(() => t(\"el.datepicker.week\"));\n  const getCellClasses = (cell) => {\n    const classes = [];\n    if (isNormalDay(cell.type) && !cell.disabled) {\n      classes.push(\"available\");\n      if (cell.type === \"today\") {\n        classes.push(\"today\");\n      }\n    } else {\n      classes.push(cell.type);\n    }\n    if (isCurrent(cell)) {\n      classes.push(\"current\");\n    }\n    if (cell.inRange && (isNormalDay(cell.type) || props.selectionMode === \"week\")) {\n      classes.push(\"in-range\");\n      if (cell.start) {\n        classes.push(\"start-date\");\n      }\n      if (cell.end) {\n        classes.push(\"end-date\");\n      }\n    }\n    if (cell.disabled) {\n      classes.push(\"disabled\");\n    }\n    if (cell.selected) {\n      classes.push(\"selected\");\n    }\n    if (cell.customClass) {\n      classes.push(cell.customClass);\n    }\n    return classes.join(\" \");\n  };\n  const getRowKls = (cell) => [\n    ns.e(\"row\"),\n    { current: isWeekActive(cell) }\n  ];\n  return {\n    tableKls,\n    tableLabel,\n    weekLabel,\n    getCellClasses,\n    getRowKls,\n    t\n  };\n};\nexport { useBasicDateTable, useBasicDateTableDOM };\n",
      "start": 1709718919072,
      "end": 1709718919410,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/sebastianwessel/projekte/voyage/node_modules/element-plus/es/components/date-picker/src/composables/use-basic-date-table.mjs\"],\n  \"sourcesContent\": [\"import { ref, computed, unref, watch, nextTick } from 'vue';\\nimport dayjs from 'dayjs';\\nimport { flatten } from 'lodash-unified';\\nimport '../../../../hooks/index.mjs';\\nimport '../../../../utils/index.mjs';\\nimport { buildPickerTable } from '../utils.mjs';\\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\\nimport { castArray } from '../../../../utils/arrays.mjs';\\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\\n\\nconst isNormalDay = (type = \\\"\\\") => {\\n  return [\\\"normal\\\", \\\"today\\\"].includes(type);\\n};\\nconst useBasicDateTable = (props, emit) => {\\n  const { lang } = useLocale();\\n  const tbodyRef = ref();\\n  const currentCellRef = ref();\\n  const lastRow = ref();\\n  const lastColumn = ref();\\n  const tableRows = ref([[], [], [], [], [], []]);\\n  let focusWithClick = false;\\n  const firstDayOfWeek = props.date.$locale().weekStart || 7;\\n  const WEEKS_CONSTANT = props.date.locale(\\\"en\\\").localeData().weekdaysShort().map((_) => _.toLowerCase());\\n  const offsetDay = computed(() => {\\n    return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;\\n  });\\n  const startDate = computed(() => {\\n    const startDayOfMonth = props.date.startOf(\\\"month\\\");\\n    return startDayOfMonth.subtract(startDayOfMonth.day() || 7, \\\"day\\\");\\n  });\\n  const WEEKS = computed(() => {\\n    return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);\\n  });\\n  const hasCurrent = computed(() => {\\n    return flatten(unref(rows)).some((row) => {\\n      return row.isCurrent;\\n    });\\n  });\\n  const days = computed(() => {\\n    const startOfMonth = props.date.startOf(\\\"month\\\");\\n    const startOfMonthDay = startOfMonth.day() || 7;\\n    const dateCountOfMonth = startOfMonth.daysInMonth();\\n    const dateCountOfLastMonth = startOfMonth.subtract(1, \\\"month\\\").daysInMonth();\\n    return {\\n      startOfMonthDay,\\n      dateCountOfMonth,\\n      dateCountOfLastMonth\\n    };\\n  });\\n  const selectedDate = computed(() => {\\n    return props.selectionMode === \\\"dates\\\" ? castArray(props.parsedValue) : [];\\n  });\\n  const setDateText = (cell, { count, rowIndex, columnIndex }) => {\\n    const { startOfMonthDay, dateCountOfMonth, dateCountOfLastMonth } = unref(days);\\n    const offset = unref(offsetDay);\\n    if (rowIndex >= 0 && rowIndex <= 1) {\\n      const numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;\\n      if (columnIndex + rowIndex * 7 >= numberOfDaysFromPreviousMonth) {\\n        cell.text = count;\\n        return true;\\n      } else {\\n        cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - columnIndex % 7) + 1 + rowIndex * 7;\\n        cell.type = \\\"prev-month\\\";\\n      }\\n    } else {\\n      if (count <= dateCountOfMonth) {\\n        cell.text = count;\\n      } else {\\n        cell.text = count - dateCountOfMonth;\\n        cell.type = \\\"next-month\\\";\\n      }\\n      return true;\\n    }\\n    return false;\\n  };\\n  const setCellMetadata = (cell, { columnIndex, rowIndex }, count) => {\\n    const { disabledDate, cellClassName } = props;\\n    const _selectedDate = unref(selectedDate);\\n    const shouldIncrement = setDateText(cell, { count, rowIndex, columnIndex });\\n    const cellDate = cell.dayjs.toDate();\\n    cell.selected = _selectedDate.find((d) => d.isSame(cell.dayjs, \\\"day\\\"));\\n    cell.isSelected = !!cell.selected;\\n    cell.isCurrent = isCurrent(cell);\\n    cell.disabled = disabledDate == null ? void 0 : disabledDate(cellDate);\\n    cell.customClass = cellClassName == null ? void 0 : cellClassName(cellDate);\\n    return shouldIncrement;\\n  };\\n  const setRowMetadata = (row) => {\\n    if (props.selectionMode === \\\"week\\\") {\\n      const [start, end] = props.showWeekNumber ? [1, 7] : [0, 6];\\n      const isActive = isWeekActive(row[start + 1]);\\n      row[start].inRange = isActive;\\n      row[start].start = isActive;\\n      row[end].inRange = isActive;\\n      row[end].end = isActive;\\n    }\\n  };\\n  const rows = computed(() => {\\n    const { minDate, maxDate, rangeState, showWeekNumber } = props;\\n    const offset = unref(offsetDay);\\n    const rows_ = unref(tableRows);\\n    const dateUnit = \\\"day\\\";\\n    let count = 1;\\n    if (showWeekNumber) {\\n      for (let rowIndex = 0; rowIndex < 6; rowIndex++) {\\n        if (!rows_[rowIndex][0]) {\\n          rows_[rowIndex][0] = {\\n            type: \\\"week\\\",\\n            text: unref(startDate).add(rowIndex * 7 + 1, dateUnit).week()\\n          };\\n        }\\n      }\\n    }\\n    buildPickerTable({ row: 6, column: 7 }, rows_, {\\n      startDate: minDate,\\n      columnIndexOffset: showWeekNumber ? 1 : 0,\\n      nextEndDate: rangeState.endDate || maxDate || rangeState.selecting && minDate || null,\\n      now: dayjs().locale(unref(lang)).startOf(dateUnit),\\n      unit: dateUnit,\\n      relativeDateGetter: (idx) => unref(startDate).add(idx - offset, dateUnit),\\n      setCellMetadata: (...args) => {\\n        if (setCellMetadata(...args, count)) {\\n          count += 1;\\n        }\\n      },\\n      setRowMetadata\\n    });\\n    return rows_;\\n  });\\n  watch(() => props.date, async () => {\\n    var _a;\\n    if ((_a = unref(tbodyRef)) == null ? void 0 : _a.contains(document.activeElement)) {\\n      await nextTick();\\n      await focus();\\n    }\\n  });\\n  const focus = async () => {\\n    var _a;\\n    return (_a = unref(currentCellRef)) == null ? void 0 : _a.focus();\\n  };\\n  const isCurrent = (cell) => {\\n    return props.selectionMode === \\\"date\\\" && isNormalDay(cell.type) && cellMatchesDate(cell, props.parsedValue);\\n  };\\n  const cellMatchesDate = (cell, date) => {\\n    if (!date)\\n      return false;\\n    return dayjs(date).locale(unref(lang)).isSame(props.date.date(Number(cell.text)), \\\"day\\\");\\n  };\\n  const getDateOfCell = (row, column) => {\\n    const offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - unref(offsetDay);\\n    return unref(startDate).add(offsetFromStart, \\\"day\\\");\\n  };\\n  const handleMouseMove = (event) => {\\n    var _a;\\n    if (!props.rangeState.selecting)\\n      return;\\n    let target = event.target;\\n    if (target.tagName === \\\"SPAN\\\") {\\n      target = (_a = target.parentNode) == null ? void 0 : _a.parentNode;\\n    }\\n    if (target.tagName === \\\"DIV\\\") {\\n      target = target.parentNode;\\n    }\\n    if (target.tagName !== \\\"TD\\\")\\n      return;\\n    const row = target.parentNode.rowIndex - 1;\\n    const column = target.cellIndex;\\n    if (unref(rows)[row][column].disabled)\\n      return;\\n    if (row !== unref(lastRow) || column !== unref(lastColumn)) {\\n      lastRow.value = row;\\n      lastColumn.value = column;\\n      emit(\\\"changerange\\\", {\\n        selecting: true,\\n        endDate: getDateOfCell(row, column)\\n      });\\n    }\\n  };\\n  const isSelectedCell = (cell) => {\\n    return !unref(hasCurrent) && (cell == null ? void 0 : cell.text) === 1 && cell.type === \\\"normal\\\" || cell.isCurrent;\\n  };\\n  const handleFocus = (event) => {\\n    if (focusWithClick || unref(hasCurrent) || props.selectionMode !== \\\"date\\\")\\n      return;\\n    handlePickDate(event, true);\\n  };\\n  const handleMouseDown = (event) => {\\n    const target = event.target.closest(\\\"td\\\");\\n    if (!target)\\n      return;\\n    focusWithClick = true;\\n  };\\n  const handleMouseUp = (event) => {\\n    const target = event.target.closest(\\\"td\\\");\\n    if (!target)\\n      return;\\n    focusWithClick = false;\\n  };\\n  const handleRangePick = (newDate) => {\\n    if (!props.rangeState.selecting || !props.minDate) {\\n      emit(\\\"pick\\\", { minDate: newDate, maxDate: null });\\n      emit(\\\"select\\\", true);\\n    } else {\\n      if (newDate >= props.minDate) {\\n        emit(\\\"pick\\\", { minDate: props.minDate, maxDate: newDate });\\n      } else {\\n        emit(\\\"pick\\\", { minDate: newDate, maxDate: props.minDate });\\n      }\\n      emit(\\\"select\\\", false);\\n    }\\n  };\\n  const handleWeekPick = (newDate) => {\\n    const weekNumber = newDate.week();\\n    const value = `${newDate.year()}w${weekNumber}`;\\n    emit(\\\"pick\\\", {\\n      year: newDate.year(),\\n      week: weekNumber,\\n      value,\\n      date: newDate.startOf(\\\"week\\\")\\n    });\\n  };\\n  const handleDatesPick = (newDate, selected) => {\\n    const newValue = selected ? castArray(props.parsedValue).filter((d) => (d == null ? void 0 : d.valueOf()) !== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);\\n    emit(\\\"pick\\\", newValue);\\n  };\\n  const handlePickDate = (event, isKeyboardMovement = false) => {\\n    const target = event.target.closest(\\\"td\\\");\\n    if (!target)\\n      return;\\n    const row = target.parentNode.rowIndex - 1;\\n    const column = target.cellIndex;\\n    const cell = unref(rows)[row][column];\\n    if (cell.disabled || cell.type === \\\"week\\\")\\n      return;\\n    const newDate = getDateOfCell(row, column);\\n    switch (props.selectionMode) {\\n      case \\\"range\\\": {\\n        handleRangePick(newDate);\\n        break;\\n      }\\n      case \\\"date\\\": {\\n        emit(\\\"pick\\\", newDate, isKeyboardMovement);\\n        break;\\n      }\\n      case \\\"week\\\": {\\n        handleWeekPick(newDate);\\n        break;\\n      }\\n      case \\\"dates\\\": {\\n        handleDatesPick(newDate, !!cell.selected);\\n        break;\\n      }\\n      default: {\\n        break;\\n      }\\n    }\\n  };\\n  const isWeekActive = (cell) => {\\n    if (props.selectionMode !== \\\"week\\\")\\n      return false;\\n    let newDate = props.date.startOf(\\\"day\\\");\\n    if (cell.type === \\\"prev-month\\\") {\\n      newDate = newDate.subtract(1, \\\"month\\\");\\n    }\\n    if (cell.type === \\\"next-month\\\") {\\n      newDate = newDate.add(1, \\\"month\\\");\\n    }\\n    newDate = newDate.date(Number.parseInt(cell.text, 10));\\n    if (props.parsedValue && !Array.isArray(props.parsedValue)) {\\n      const dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;\\n      const weekDate = props.parsedValue.subtract(dayOffset, \\\"day\\\");\\n      return weekDate.isSame(newDate, \\\"day\\\");\\n    }\\n    return false;\\n  };\\n  return {\\n    WEEKS,\\n    rows,\\n    tbodyRef,\\n    currentCellRef,\\n    focus,\\n    isCurrent,\\n    isWeekActive,\\n    isSelectedCell,\\n    handlePickDate,\\n    handleMouseUp,\\n    handleMouseDown,\\n    handleMouseMove,\\n    handleFocus\\n  };\\n};\\nconst useBasicDateTableDOM = (props, {\\n  isCurrent,\\n  isWeekActive\\n}) => {\\n  const ns = useNamespace(\\\"date-table\\\");\\n  const { t } = useLocale();\\n  const tableKls = computed(() => [\\n    ns.b(),\\n    { \\\"is-week-mode\\\": props.selectionMode === \\\"week\\\" }\\n  ]);\\n  const tableLabel = computed(() => t(\\\"el.datepicker.dateTablePrompt\\\"));\\n  const weekLabel = computed(() => t(\\\"el.datepicker.week\\\"));\\n  const getCellClasses = (cell) => {\\n    const classes = [];\\n    if (isNormalDay(cell.type) && !cell.disabled) {\\n      classes.push(\\\"available\\\");\\n      if (cell.type === \\\"today\\\") {\\n        classes.push(\\\"today\\\");\\n      }\\n    } else {\\n      classes.push(cell.type);\\n    }\\n    if (isCurrent(cell)) {\\n      classes.push(\\\"current\\\");\\n    }\\n    if (cell.inRange && (isNormalDay(cell.type) || props.selectionMode === \\\"week\\\")) {\\n      classes.push(\\\"in-range\\\");\\n      if (cell.start) {\\n        classes.push(\\\"start-date\\\");\\n      }\\n      if (cell.end) {\\n        classes.push(\\\"end-date\\\");\\n      }\\n    }\\n    if (cell.disabled) {\\n      classes.push(\\\"disabled\\\");\\n    }\\n    if (cell.selected) {\\n      classes.push(\\\"selected\\\");\\n    }\\n    if (cell.customClass) {\\n      classes.push(cell.customClass);\\n    }\\n    return classes.join(\\\" \\\");\\n  };\\n  const getRowKls = (cell) => [\\n    ns.e(\\\"row\\\"),\\n    { current: isWeekActive(cell) }\\n  ];\\n  return {\\n    tableKls,\\n    tableLabel,\\n    weekLabel,\\n    getCellClasses,\\n    getRowKls,\\n    t\\n  };\\n};\\n\\nexport { useBasicDateTable, useBasicDateTableDOM };\\n//# sourceMappingURL=use-basic-date-table.mjs.map\\n\"],\n  \"mappings\": \"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\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709718919410,
      "end": 1709718919410,
      "order": "normal"
    }
  ]
}
